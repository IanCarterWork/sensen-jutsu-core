export default class SensenColoring {
    /* Hex Manipulation - Begin */
    static HexToRGB(hex) {
        let r = 0, g = 0, b = 0;
        if (hex.length == 4) {
            r = `0x${hex[1] + hex[1]}`;
            g = `0x${hex[2] + hex[2]}`;
            b = `0x${hex[3] + hex[3]}`;
        }
        else if (hex.length == 7) {
            r = `0x${hex[1] + hex[2]}`;
            g = `0x${hex[3] + hex[4]}`;
            b = `0x${hex[5] + hex[6]}`;
        }
        return [+r, +g, +b];
    }
    static HexToCMYK(hex) {
        let C = 0, M = 0, Y = 0, K = 0;
        hex = (hex.charAt(0) == "#") ? hex.substring(1, 7) : hex;
        if (hex.length != 6) {
            return;
        }
        if (/[0-9a-f]{6}/i.test(hex) != true) {
            return;
        }
        let r = parseInt(hex.substring(0, 2), 16);
        let g = parseInt(hex.substring(2, 4), 16);
        let b = parseInt(hex.substring(4, 6), 16);
        // BLACK
        if (r == 0 && g == 0 && b == 0) {
            K = 1;
            return [0, 0, 0, 1];
        }
        C = 1 - (r / 255);
        M = 1 - (g / 255);
        Y = 1 - (b / 255);
        var minCMY = Math.min(C, Math.min(M, Y));
        C = (C - minCMY) / (1 - minCMY);
        M = (M - minCMY) / (1 - minCMY);
        Y = (Y - minCMY) / (1 - minCMY);
        K = minCMY;
        return [C, M, Y, K];
    }
    /* Hex Manipulation - End */
    /* RGB Manipulation - Begin */
    static RGBtoHex({ red, green, blue }) {
        return `#${((1 << 24) + (red << 16) + (green << 8) + blue).toString(16).slice(1)}`;
    }
    static RGBToHSL(r, g, b) {
        r /= 255;
        g /= 255;
        b /= 255;
        let cmin = Math.min(r, g, b), cmax = Math.max(r, g, b), delta = cmax - cmin, h = 0, s = 0, l = 0;
        return `${h}`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3JpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb2xvcmluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxNQUFNLENBQUMsT0FBTyxPQUFPLGNBQWM7SUFJL0IsOEJBQThCO0lBRTlCLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBVztRQUV2QixJQUFJLENBQUMsR0FBb0IsQ0FBQyxFQUFFLENBQUMsR0FBb0IsQ0FBQyxFQUFFLENBQUMsR0FBb0IsQ0FBQyxDQUFDO1FBRTNFLElBQUcsR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUM7WUFFaEIsQ0FBQyxHQUFHLEtBQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUUsRUFBRSxDQUFDO1lBRTdCLENBQUMsR0FBRyxLQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFFLEVBQUUsQ0FBQztZQUU3QixDQUFDLEdBQUcsS0FBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBRSxFQUFFLENBQUM7U0FFL0I7YUFFSSxJQUFJLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFDO1lBRXRCLENBQUMsR0FBRyxLQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFFLEVBQUUsQ0FBQztZQUU3QixDQUFDLEdBQUcsS0FBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBRSxFQUFFLENBQUM7WUFFN0IsQ0FBQyxHQUFHLEtBQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUUsRUFBRSxDQUFDO1NBRS9CO1FBRUQsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEIsQ0FBQztJQUtELE1BQU0sQ0FBQyxTQUFTLENBQUUsR0FB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QUFHLENBQUM7UUFHVCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQ3RCLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQ3RCLEtBQUssR0FBRyxJQUFJLEdBQUcsSUFBSSxFQUNuQixDQUFDLEdBQUcsQ0FBQyxFQUNMLENBQUMsR0FBRyxDQUFDLEVBQ0wsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVWLE9BQU8sR0FBRyxDQUFDLEVBQUUsQ0FBQztJQUVsQixDQUFDO0NBVUoiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbnNlbkNvbG9yaW5ne1xuXG5cblxuICAgIC8qIEhleCBNYW5pcHVsYXRpb24gLSBCZWdpbiAqL1xuXG4gICAgc3RhdGljIEhleFRvUkdCKGhleDogc3RyaW5nKXtcblxuICAgICAgICBsZXQgcjogc3RyaW5nIHwgbnVtYmVyID0gMCwgZzogc3RyaW5nIHwgbnVtYmVyID0gMCwgYjogc3RyaW5nIHwgbnVtYmVyID0gMDtcblxuICAgICAgICBpZihoZXgubGVuZ3RoID09IDQpe1xuXG4gICAgICAgICAgIHIgPSBgMHgkeyBoZXhbMV0gKyBoZXhbMV0gfWA7XG5cbiAgICAgICAgICAgZyA9IGAweCR7IGhleFsyXSArIGhleFsyXSB9YDtcbiAgICAgICAgICAgXG4gICAgICAgICAgIGIgPSBgMHgkeyBoZXhbM10gKyBoZXhbM10gfWA7XG5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZWxzZSBpZiAoaGV4Lmxlbmd0aCA9PSA3KXtcbiAgICAgXG4gICAgICAgICAgIHIgPSBgMHgkeyBoZXhbMV0gKyBoZXhbMl0gfWA7XG4gICAgICAgICAgIFxuICAgICAgICAgICBnID0gYDB4JHsgaGV4WzNdICsgaGV4WzRdIH1gO1xuICAgICAgICAgICBcbiAgICAgICAgICAgYiA9IGAweCR7IGhleFs1XSArIGhleFs2XSB9YDtcblxuICAgICAgICB9XG4gICAgIFxuICAgICAgICByZXR1cm4gWytyLCtnLCtiXTtcbiAgICAgICAgXG4gICAgfVxuXG5cblxuXG4gICAgc3RhdGljIEhleFRvQ01ZSyAoaGV4OiBzdHJpbmcgKSB7XG5cbiAgICAgICAgbGV0IEMgPSAwLCBNID0gMCwgWSA9IDAsIEsgPSAwO1xuICAgICAgIFxuICAgICAgICBoZXggPSAoaGV4LmNoYXJBdCgwKT09XCIjXCIpID8gaGV4LnN1YnN0cmluZygxLDcpIDogaGV4O1xuICAgICAgIFxuICAgICAgICBpZiAoaGV4Lmxlbmd0aCAhPSA2KSB7IHJldHVybjsgfVxuICAgICAgICBpZiAoL1swLTlhLWZdezZ9L2kudGVzdChoZXgpICE9IHRydWUpIHtcbiAgICAgICAgIHJldHVybjsgXG4gICAgICAgIH1cbiAgICAgICBcbiAgICAgICAgbGV0IHIgPSBwYXJzZUludChoZXguc3Vic3RyaW5nKDAsMiksMTYpOyBcbiAgICAgICAgbGV0IGcgPSBwYXJzZUludChoZXguc3Vic3RyaW5nKDIsNCksMTYpOyBcbiAgICAgICAgbGV0IGIgPSBwYXJzZUludChoZXguc3Vic3RyaW5nKDQsNiksMTYpOyBcbiAgICAgICBcbiAgICAgICAgLy8gQkxBQ0tcbiAgICAgICAgaWYgKHI9PTAgJiYgZz09MCAmJiBiPT0wKSB7XG4gICAgICAgICBLID0gMTtcbiAgICAgICAgIHJldHVybiBbMCwwLDAsMV07XG4gICAgICAgIH1cbiAgICAgICBcbiAgICAgICAgQyA9IDEgLSAoci8yNTUpO1xuICAgICAgICBNID0gMSAtIChnLzI1NSk7XG4gICAgICAgIFkgPSAxIC0gKGIvMjU1KTtcbiAgICAgICBcbiAgICAgICAgdmFyIG1pbkNNWSA9IE1hdGgubWluKEMsTWF0aC5taW4oTSxZKSk7XG4gICAgICAgXG4gICAgICAgIEMgPSAoQyAtIG1pbkNNWSkgLyAoMSAtIG1pbkNNWSkgO1xuICAgICAgICBNID0gKE0gLSBtaW5DTVkpIC8gKDEgLSBtaW5DTVkpIDtcbiAgICAgICAgWSA9IChZIC0gbWluQ01ZKSAvICgxIC0gbWluQ01ZKSA7XG4gICAgICAgIEsgPSBtaW5DTVk7XG4gICAgICAgXG4gICAgICAgIHJldHVybiBbQyxNLFksS107XG4gICAgfVxuXG4gICAgLyogSGV4IE1hbmlwdWxhdGlvbiAtIEVuZCAqL1xuICAgIFxuXG5cblxuXG4gICAgLyogUkdCIE1hbmlwdWxhdGlvbiAtIEJlZ2luICovXG4gICAgXG4gICAgc3RhdGljIFJHQnRvSGV4KHtyZWQsIGdyZWVuLCBibHVlfToge1xuXG4gICAgICAgIHJlZDogbnVtYmVyLFxuXG4gICAgICAgIGdyZWVuOiBudW1iZXIsXG5cbiAgICAgICAgYmx1ZTogbnVtYmVyLFxuXG4gICAgfSl7XG5cbiAgICAgICAgcmV0dXJuIGAjJHsgKCgxIDw8IDI0KSArIChyZWQgPDwgMTYpICsgKGdyZWVuIDw8IDgpICsgYmx1ZSkudG9TdHJpbmcoMTYpLnNsaWNlKDEpIH1gOyAgICAgICAgXG5cbiAgICB9XG5cbiAgICBzdGF0aWMgUkdCVG9IU0wocjpudW1iZXIsIGc6bnVtYmVyLCBiOm51bWJlcikge1xuXG4gICAgICAgIHIgLz0gMjU1O1xuICAgICAgICBnIC89IDI1NTtcbiAgICAgICAgYiAvPSAyNTU7XG4gICAgICBcblxuICAgICAgICBsZXQgY21pbiA9IE1hdGgubWluKHIsZyxiKSxcbiAgICAgICAgICAgIGNtYXggPSBNYXRoLm1heChyLGcsYiksXG4gICAgICAgICAgICBkZWx0YSA9IGNtYXggLSBjbWluLFxuICAgICAgICAgICAgaCA9IDAsXG4gICAgICAgICAgICBzID0gMCxcbiAgICAgICAgICAgIGwgPSAwO1xuXG4gICAgICAgIHJldHVybiBgJHtofWA7XG4gICAgICAgICAgICBcbiAgICB9XG5cbiAgICAvKiBSR0IgTWFuaXB1bGF0aW9uIC0gRW5kICovXG4gICAgXG5cblxuXG5cblxuXG59XG4iXX0=