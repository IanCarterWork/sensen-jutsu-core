import Sensen, { SensenHTMLElement } from "..";
/**
 * Scene Header
 */
export class SceneActivityHeader extends SensenHTMLElement {
    constructor() {
        super({});
    }
}
/**
 * Scene Body
 */
export class SceneActivityBody extends SensenHTMLElement {
    constructor() {
        super({});
    }
}
/**
 * Scene Footer
 */
export class SceneActivityMenu extends SensenHTMLElement {
    constructor() {
        super({});
    }
}
export function activityHeaderComponent() {
    return new Sensen.Component({
        name: 'activityHeader',
        template: `
    <div activity-header-goback >Go Back</div>
    <div activity-header-left ></div>
    <div activity-header-center ">{{ this.props.title }}</div>
    <div activity-header-right ></div>
        `,
        emit: {
            expressionRecorded: (record) => { },
            connected: (e) => {
                // console.warn('Component Connected', e.emit.props.title)
            }
        },
        appearance: {
            $self: [
                {
                    display: 'flex',
                    flexDirection: 'row'
                }
            ]
        },
        props: {
            title: 'default title',
            goBack: false,
        },
        state: {
            title: false,
        },
        methods: {
            goBack({ self, event }) {
            },
        }
    });
}
export function useScreenElements() {
    if (!customElements.get(`scene-header`)) {
        customElements.define(`scene-header`, SceneActivityHeader);
    }
    if (!customElements.get(`scene-body`)) {
        customElements.define(`scene-body`, SceneActivityBody);
    }
    if (!customElements.get(`scene-menu`)) {
        customElements.define(`scene-menu`, SceneActivityMenu);
    }
    return {
        component: {
            hedaer: activityHeaderComponent()
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhY3Rpdml0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE1BQU0sRUFBRSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sSUFBSSxDQUFDO0FBSy9DOztHQUVHO0FBQ0gsTUFBTSxPQUFPLG1CQUFvQixTQUFRLGlCQUFxQjtJQUUxRDtRQUVJLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVkLENBQUM7Q0FFSjtBQUdEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGlCQUFrQixTQUFRLGlCQUFxQjtJQUV4RDtRQUVJLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVkLENBQUM7Q0FFSjtBQUdEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGlCQUFrQixTQUFRLGlCQUFxQjtJQUV4RDtRQUVJLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVkLENBQUM7Q0FFSjtBQXVCRCxNQUFNLFVBQVUsdUJBQXVCO0lBRW5DLE9BQU8sSUFBSSxNQUFNLENBQUMsU0FBUyxDQUE2RjtRQUVwSCxJQUFJLEVBQUUsZ0JBQWdCO1FBRXRCLFFBQVEsRUFBRTs7Ozs7U0FLVDtRQUVELElBQUksRUFBQztZQUVELGtCQUFrQixFQUFFLENBQUMsTUFBTSxFQUFDLEVBQUUsR0FBRSxDQUFDO1lBRWpDLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBQyxFQUFFO2dCQUNaLDBEQUEwRDtZQUM5RCxDQUFDO1NBRUo7UUFHRCxVQUFVLEVBQUU7WUFFUixLQUFLLEVBQUM7Z0JBQ0Y7b0JBQ0ksT0FBTyxFQUFDLE1BQU07b0JBQ2QsYUFBYSxFQUFDLEtBQUs7aUJBQ3RCO2FBQ0o7U0FFSjtRQUdELEtBQUssRUFBQztZQUVGLEtBQUssRUFBRSxlQUFlO1lBRXRCLE1BQU0sRUFBRSxLQUFLO1NBRWhCO1FBR0QsS0FBSyxFQUFDO1lBRUYsS0FBSyxFQUFFLEtBQUs7U0FFZjtRQUVELE9BQU8sRUFBQztZQUVKLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUM7WUFHckIsQ0FBQztTQUVKO0tBR0osQ0FBQyxDQUFBO0FBRU4sQ0FBQztBQUtELE1BQU0sVUFBVSxpQkFBaUI7SUFJN0IsSUFBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEVBQUM7UUFFbkMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsbUJBQW1CLENBQUMsQ0FBQTtLQUU3RDtJQUVELElBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFDO1FBRWpDLGNBQWMsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLGlCQUFpQixDQUFDLENBQUE7S0FFekQ7SUFFRCxJQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBQztRQUVqQyxjQUFjLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxpQkFBaUIsQ0FBQyxDQUFBO0tBRXpEO0lBR0QsT0FBTztRQUVILFNBQVMsRUFBQztZQUVOLE1BQU0sRUFBRSx1QkFBdUIsRUFBRTtTQUVwQztLQUVKLENBQUE7QUFFTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNlbnNlbiwgeyBTZW5zZW5IVE1MRWxlbWVudCB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IHsgQ29tcG9uZW50TWV0aG9kUmF3LCBDb21wb25lbnRQcm9wcywgQ29tcG9uZW50U3RhdGUgfSBmcm9tIFwiLi4vaW5kZXgudFwiO1xuXG5cblxuLyoqXG4gKiBTY2VuZSBIZWFkZXJcbiAqL1xuZXhwb3J0IGNsYXNzIFNjZW5lQWN0aXZpdHlIZWFkZXIgZXh0ZW5kcyBTZW5zZW5IVE1MRWxlbWVudDx7fT4ge1xuXG4gICAgY29uc3RydWN0b3IoKXtcblxuICAgICAgICBzdXBlcih7fSk7XG5cbiAgICB9XG5cbn1cblxuXG4vKipcbiAqIFNjZW5lIEJvZHlcbiAqL1xuZXhwb3J0IGNsYXNzIFNjZW5lQWN0aXZpdHlCb2R5IGV4dGVuZHMgU2Vuc2VuSFRNTEVsZW1lbnQ8e30+IHtcblxuICAgIGNvbnN0cnVjdG9yKCl7XG5cbiAgICAgICAgc3VwZXIoe30pO1xuXG4gICAgfVxuXG59XG5cblxuLyoqXG4gKiBTY2VuZSBGb290ZXJcbiAqL1xuZXhwb3J0IGNsYXNzIFNjZW5lQWN0aXZpdHlNZW51IGV4dGVuZHMgU2Vuc2VuSFRNTEVsZW1lbnQ8e30+IHtcblxuICAgIGNvbnN0cnVjdG9yKCl7XG5cbiAgICAgICAgc3VwZXIoe30pO1xuXG4gICAgfVxuXG59XG5cblxuXG5cbmV4cG9ydCB0eXBlIEFjdGl2aXR5SGVhZGVyQ29tcG9uZW50U3RhdGUgPSBDb21wb25lbnRTdGF0ZSAmIHtcblxuICAgIHRpdGxlOiBzdHJpbmcgfCBib29sZWFuO1xuICAgIFxufVxuXG5leHBvcnQgdHlwZSBBY3Rpdml0eUhlYWRlckNvbXBvbmVudFByb3BzID0gQ29tcG9uZW50UHJvcHMgJiB7XG5cbiAgICBnb0JhY2s6IGJvb2xlYW47XG4gICAgXG59XG5cbmV4cG9ydCB0eXBlIEFjdGl2aXR5SGVhZGVyQ29tcG9uZW50TWV0aG9kcyA9IENvbXBvbmVudE1ldGhvZFJhdzxBY3Rpdml0eUhlYWRlckNvbXBvbmVudFN0YXRlLCBBY3Rpdml0eUhlYWRlckNvbXBvbmVudFByb3BzPiAmIHtcblxuICAgIGdvQmFjazogKCk9PnZvaWQ7XG4gICAgXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhY3Rpdml0eUhlYWRlckNvbXBvbmVudCgpe1xuICAgIFxuICAgIHJldHVybiBuZXcgU2Vuc2VuLkNvbXBvbmVudDxBY3Rpdml0eUhlYWRlckNvbXBvbmVudFN0YXRlLCBBY3Rpdml0eUhlYWRlckNvbXBvbmVudFByb3BzLCBBY3Rpdml0eUhlYWRlckNvbXBvbmVudE1ldGhvZHM+KHtcbiAgICBcbiAgICAgICAgbmFtZTogJ2FjdGl2aXR5SGVhZGVyJyxcbiAgICBcbiAgICAgICAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IGFjdGl2aXR5LWhlYWRlci1nb2JhY2sgPkdvIEJhY2s8L2Rpdj5cbiAgICA8ZGl2IGFjdGl2aXR5LWhlYWRlci1sZWZ0ID48L2Rpdj5cbiAgICA8ZGl2IGFjdGl2aXR5LWhlYWRlci1jZW50ZXIgXCI+e3sgdGhpcy5wcm9wcy50aXRsZSB9fTwvZGl2PlxuICAgIDxkaXYgYWN0aXZpdHktaGVhZGVyLXJpZ2h0ID48L2Rpdj5cbiAgICAgICAgYCxcbiAgICAgICAgXG4gICAgICAgIGVtaXQ6e1xuICAgIFxuICAgICAgICAgICAgZXhwcmVzc2lvblJlY29yZGVkOiAocmVjb3JkKT0+eyB9LFxuICAgIFxuICAgICAgICAgICAgY29ubmVjdGVkOiAoZSk9PnsgXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKCdDb21wb25lbnQgQ29ubmVjdGVkJywgZS5lbWl0LnByb3BzLnRpdGxlKVxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICB9LFxuXG5cbiAgICAgICAgYXBwZWFyYW5jZToge1xuXG4gICAgICAgICAgICAkc2VsZjpbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OidmbGV4JyxcbiAgICAgICAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjoncm93J1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgICAgIFxuICAgICAgICB9LFxuICAgIFxuICAgIFxuICAgICAgICBwcm9wczp7XG4gICAgXG4gICAgICAgICAgICB0aXRsZTogJ2RlZmF1bHQgdGl0bGUnLFxuXG4gICAgICAgICAgICBnb0JhY2s6IGZhbHNlLFxuICAgIFxuICAgICAgICB9LFxuICAgIFxuICAgIFxuICAgICAgICBzdGF0ZTp7XG4gICAgXG4gICAgICAgICAgICB0aXRsZTogZmFsc2UsXG4gICAgXG4gICAgICAgIH0sXG4gICAgXG4gICAgICAgIG1ldGhvZHM6e1xuICAgIFxuICAgICAgICAgICAgZ29CYWNrKHsgc2VsZiwgZXZlbnR9KXtcblxuICAgIFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgXG4gICAgfSlcbiAgICBcbn1cblxuXG5cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVNjcmVlbkVsZW1lbnRzKCl7XG5cblxuXG4gICAgaWYoIWN1c3RvbUVsZW1lbnRzLmdldChgc2NlbmUtaGVhZGVyYCkpe1xuXG4gICAgICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZShgc2NlbmUtaGVhZGVyYCwgU2NlbmVBY3Rpdml0eUhlYWRlcilcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGlmKCFjdXN0b21FbGVtZW50cy5nZXQoYHNjZW5lLWJvZHlgKSl7XG5cbiAgICAgICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKGBzY2VuZS1ib2R5YCwgU2NlbmVBY3Rpdml0eUJvZHkpXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBpZighY3VzdG9tRWxlbWVudHMuZ2V0KGBzY2VuZS1tZW51YCkpe1xuXG4gICAgICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZShgc2NlbmUtbWVudWAsIFNjZW5lQWN0aXZpdHlNZW51KVxuICAgICAgICBcbiAgICB9XG4gICAgXG5cbiAgICByZXR1cm4ge1xuXG4gICAgICAgIGNvbXBvbmVudDp7XG5cbiAgICAgICAgICAgIGhlZGFlcjogYWN0aXZpdHlIZWFkZXJDb21wb25lbnQoKVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuXG59XG4iXX0=