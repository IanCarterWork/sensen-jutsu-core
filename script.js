import { SockRenderEngine } from "./compilate";
import { StabilizeEchoExpression, StabilizeSnapCodeExpression } from "./expression";
import { StabilizeContent } from "./utilities";
/**
 * Detect and run script in element in context with variables dictionary
 */
export async function Run(element, context, dictionary) {
    const scripts = element.querySelectorAll('script');
    const promised = [];
    if (scripts.length) {
        scripts.forEach(script => {
            const type = (script.getAttribute('type') || '').toLowerCase();
            const exec = document.createElement('script');
            promised.push(new Promise((resolve, reject) => {
                if (type == 'module/sensen') {
                    exec.setAttribute('type', 'module');
                    SockRenderEngine(StabilizeSnapCodeExpression(StabilizeEchoExpression(StabilizeContent(script.textContent || '') || '', false), false), context || element, dictionary || element.props)
                        .then(compilate => {
                        exec.innerHTML = `const $this=document.querySelector('[euid="${element.$EUiD}"]');\n${compilate}`;
                        element.insertBefore(exec, element.lastChild);
                        script.parentElement?.removeChild(script);
                        resolve(element);
                    })
                        .catch(e => console.error('Sensen Script Failed', e));
                }
                else {
                    exec.setAttribute('type', `${type || 'module'}`);
                    exec.textContent = script.textContent;
                    element.insertBefore(exec, element.lastChild);
                    script.parentElement?.removeChild(script);
                    resolve(element);
                }
            }));
        });
    }
    return Promise.all(promised);
}
/**
 * Exports
 */
export class SensenScript {
}
SensenScript.Run = Run;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2NyaXB0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUM5QyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDbkYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFBO0FBVTlDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLEtBQUssVUFBVSxHQUFHLENBQVEsT0FBaUMsRUFBRSxPQUFZLEVBQUUsVUFBZTtJQUU3RixNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUE7SUFFbEQsTUFBTSxRQUFRLEdBQThCLEVBQUUsQ0FBQTtJQUc5QyxJQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUM7UUFFZCxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQSxFQUFFO1lBRXBCLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBRSxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtZQUU1RCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBRzdDLFFBQVEsQ0FBQyxJQUFJLENBRVQsSUFBSSxPQUFPLENBQWlCLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBQyxFQUFFO2dCQUUzQyxJQUFHLElBQUksSUFBSSxlQUFlLEVBQUM7b0JBRXZCLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO29CQUVwQyxnQkFBZ0IsQ0FFWiwyQkFBMkIsQ0FFdkIsdUJBQXVCLENBRW5CLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxXQUFXLElBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxFQUVoRCxLQUFLLENBQUMsRUFFVixLQUFLLENBQUMsRUFFVixPQUFPLElBQUUsT0FBTyxFQUFFLFVBQVUsSUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDO3lCQUU3QyxJQUFJLENBQUMsU0FBUyxDQUFBLEVBQUU7d0JBRWIsSUFBSSxDQUFDLFNBQVMsR0FBRyw4Q0FBK0MsT0FBTyxDQUFDLEtBQU0sVUFBVSxTQUFTLEVBQUUsQ0FBQTt3QkFFbkcsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO3dCQUU3QyxNQUFNLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQzt3QkFFMUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBO29CQUVwQixDQUFDLENBQUM7eUJBRUQsS0FBSyxDQUFDLENBQUMsQ0FBQSxFQUFFLENBQUEsT0FBTyxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO2lCQUV0RDtxQkFFRztvQkFFQSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxHQUFJLElBQUksSUFBRSxRQUFTLEVBQUUsQ0FBQyxDQUFDO29CQUVqRCxJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUE7b0JBRXJDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQTtvQkFFN0MsTUFBTSxDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBRTFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQTtpQkFFbkI7WUFFTCxDQUFDLENBQUMsQ0FFTCxDQUFBO1FBRUwsQ0FBQyxDQUFDLENBQUE7S0FFTDtJQUdELE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUVoQyxDQUFDO0FBSUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sWUFBWTs7QUFFZCxnQkFBRyxHQUFHLEdBQUcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNlbnNlbkhUTUxFbGVtZW50IH0gZnJvbSBcIi5cIlxuaW1wb3J0IHsgU29ja1JlbmRlckVuZ2luZSB9IGZyb20gXCIuL2NvbXBpbGF0ZVwiXG5pbXBvcnQgeyBTdGFiaWxpemVFY2hvRXhwcmVzc2lvbiwgU3RhYmlsaXplU25hcENvZGVFeHByZXNzaW9uIH0gZnJvbSBcIi4vZXhwcmVzc2lvblwiXG5pbXBvcnQgeyBTdGFiaWxpemVDb250ZW50IH0gZnJvbSBcIi4vdXRpbGl0aWVzXCJcblxuXG5cblxuXG5cblxuXG5cbi8qKlxuICogRGV0ZWN0IGFuZCBydW4gc2NyaXB0IGluIGVsZW1lbnQgaW4gY29udGV4dCB3aXRoIHZhcmlhYmxlcyBkaWN0aW9uYXJ5XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBSdW48UHJvcHM+KGVsZW1lbnQ6IFNlbnNlbkhUTUxFbGVtZW50PFByb3BzPiwgY29udGV4dD86IHt9LCBkaWN0aW9uYXJ5Pzoge30pe1xuXG4gICAgY29uc3Qgc2NyaXB0cyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc2NyaXB0JylcblxuICAgIGNvbnN0IHByb21pc2VkOiBQcm9taXNlPHR5cGVvZiBlbGVtZW50PltdID0gW11cbiAgICBcblxuICAgIGlmKHNjcmlwdHMubGVuZ3RoKXtcblxuICAgICAgICBzY3JpcHRzLmZvckVhY2goc2NyaXB0PT57XG5cbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSAoc2NyaXB0LmdldEF0dHJpYnV0ZSgndHlwZScpfHwnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBleGVjID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JylcblxuXG4gICAgICAgICAgICBwcm9taXNlZC5wdXNoKFxuXG4gICAgICAgICAgICAgICAgbmV3IFByb21pc2U8dHlwZW9mIGVsZW1lbnQ+KChyZXNvbHZlLCByZWplY3QpPT57XG5cbiAgICAgICAgICAgICAgICAgICAgaWYodHlwZSA9PSAnbW9kdWxlL3NlbnNlbicpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBleGVjLnNldEF0dHJpYnV0ZSgndHlwZScsICdtb2R1bGUnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgU29ja1JlbmRlckVuZ2luZShcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhYmlsaXplU25hcENvZGVFeHByZXNzaW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhYmlsaXplRWNob0V4cHJlc3Npb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhYmlsaXplQ29udGVudChzY3JpcHQudGV4dENvbnRlbnR8fCcnKSB8fCAnJ1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICwgY29udGV4dHx8ZWxlbWVudCwgZGljdGlvbmFyeXx8ZWxlbWVudC5wcm9wcylcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihjb21waWxhdGU9PntcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhlYy5pbm5lckhUTUwgPSBgY29uc3QgJHRoaXM9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2V1aWQ9XCIkeyBlbGVtZW50LiRFVWlEIH1cIl0nKTtcXG4ke2NvbXBpbGF0ZX1gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5pbnNlcnRCZWZvcmUoZXhlYywgZWxlbWVudC5sYXN0Q2hpbGQpXG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmlwdC5wYXJlbnRFbGVtZW50Py5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGVsZW1lbnQpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGU9PmNvbnNvbGUuZXJyb3IoJ1NlbnNlbiBTY3JpcHQgRmFpbGVkJywgZSkpXG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWMuc2V0QXR0cmlidXRlKCd0eXBlJywgYCR7IHR5cGV8fCdtb2R1bGUnIH1gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZXhlYy50ZXh0Q29udGVudCA9IHNjcmlwdC50ZXh0Q29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50Lmluc2VydEJlZm9yZShleGVjLCBlbGVtZW50Lmxhc3RDaGlsZClcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JpcHQucGFyZW50RWxlbWVudD8ucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGVsZW1lbnQpXG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgKVxuXG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgIH1cblxuXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VkKVxuICAgIFxufVxuXG5cblxuLyoqXG4gKiBFeHBvcnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBTZW5zZW5TY3JpcHR7XG5cbiAgICBzdGF0aWMgUnVuID0gUnVuO1xuICAgIFxufVxuXG5cblxuXG5cblxuXG5cblxuIl19