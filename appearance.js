import { SensenEmitter } from "./emitter";
import { SensenMetricRandom } from "./metric-random";
export class SensenAppearance {
    constructor(props) {
        this.$dom = {};
        this.$UiD = '';
        this.$emitter = {};
        this.props = {};
        this.emit = {};
        this.$refs = {};
        this.$dom = document.createElement('style');
        this.$UiD = this.$generateUiD();
        this.$emitter = new SensenEmitter();
        this.props = props || {};
        /** * Emit Event */
        this.$emitter?.dispatch('construct', this);
        this.$emitting().$initialize();
    }
    $generateUiD() {
        return `${SensenMetricRandom.CreateAplpha(12).join('')}${SensenMetricRandom.Create(20).join('')}`;
    }
    $initialize() {
        this.$dom.setAttribute('rel', 'StyleSheet');
        this.$dom.setAttribute('type', 'text/css');
        this.$dom.setAttribute('sensen-appearance', `${this.$UiD}`);
        /** * Emit Event */
        this.$emitter?.dispatch('initialized', this);
        return this;
    }
    selector(selector, value) {
        this.props[selector] = this.props[selector] || [];
        const rank = this.props[selector].length;
        this.props[selector][rank] = value;
        /** * Emit Event */
        this.$emitter?.dispatch('selectorAdded', { selector, value, rank });
        return this;
    }
    selectors(appearance) {
        const entries = Object.entries(appearance || {});
        if (entries.length) {
            entries.map($ => ($[1] || []).map(selector => this.selector($[0], selector)));
        }
        return this;
    }
    $emitting() {
        /**
         * Custom Emitter Listener : Begin
         */
        if (this.emit) {
            Object.entries(this.emit).map(e => {
                if (typeof e[1] == 'function') {
                    const self = this;
                    this.$emitter?.listen(e[0], function () {
                        // @ts-ignore
                        e[1].apply(this, [arguments[0]]);
                    });
                }
            });
        }
        /**
         * Custom Emitter Listener : End
         */
        return this;
    }
    render(slot) {
        const e = document.createTextNode(slot);
        e.textContent = slot;
        this.$dom.appendChild(e);
        return e;
    }
    mount() {
        /**
         * Building
         */
        if (this.props) {
            const slot = OIAppearance(this.props);
            slot.selectors.forEach((selector, k) => {
                this.$refs[selector] = this.render(`.${this.$UiD}${(selector).trim().toLocaleLowerCase() == '$self'
                    ? `` : ` ${selector}`}{${slot.rows[k]}}`);
            });
        }
        document.head.appendChild(this.$dom);
        /** * Emit Event */
        this.$emitter?.dispatch('mounted', this);
        return this;
    }
}
export function OIAppearanceProp(prop) {
    const mv = prop.indexOf('-vertical');
    const mh = prop.indexOf('-horizontal');
    if (mv > -1) {
        const p = prop.substr(0, mv);
        return [`${p}-top`, `${p}-bottom`];
    }
    else if (mh > -1) {
        const p = prop.substr(0, mh);
        return [`${p}-left`, `${p}-right`];
    }
    return [prop];
}
export function OIAppearanceValue(value) {
    switch (typeof value) {
        case 'number':
            return (`${value}px`);
        case 'object':
            if (Array.isArray(value)) {
                return value.map(i => `${i}px`).join(' ');
            }
            else {
                return Object.keys(value).map(k => `${k}{ ${value[k]} }`).join(' ');
            }
        case 'string':
            return value;
    }
    return '';
}
export function OIAppearance(entries) {
    const rows = [];
    const selectors = [];
    const majRex = new RegExp("([A-Z])", "g");
    Object.entries(entries).forEach(entry => {
        Object.values(entry[0].trim().split(',')).forEach(selector => {
            selectors[selectors.length] = selector;
            const rw = [];
            entry[1].reverse().map(value => {
                Object.entries(value).map($ => {
                    Object.values($[0].trim().split(',')).map(prop => {
                        OIAppearanceProp((`${prop}`).replace(majRex, '-$&').toLowerCase()).forEach(p => {
                            rw[rw.length] = `${p}:${OIAppearanceValue($[1] || '')}`;
                        });
                    });
                });
            });
            rows[rows.length] = rw.join(';');
        });
    });
    return { selectors, rows };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwZWFyYW5jZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFwcGVhcmFuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUMxQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQThEckQsTUFBTSxPQUFPLGdCQUFnQjtJQWtCekIsWUFBWSxLQUF3QjtRQWZwQyxTQUFJLEdBQXFCLEVBQXNCLENBQUE7UUFFL0MsU0FBSSxHQUFXLEVBQUUsQ0FBQztRQUVsQixhQUFRLEdBQWtCLEVBQW1CLENBQUE7UUFFN0MsVUFBSyxHQUFxQixFQUFzQixDQUFBO1FBRWhELFNBQUksR0FBdUIsRUFBd0IsQ0FBQTtRQUduRCxVQUFLLEdBQTJCLEVBQUUsQ0FBQTtRQU85QixJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFNUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUE7UUFFL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO1FBRXBDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxJQUFJLEVBQXNCLENBQUE7UUFJNUMsbUJBQW1CO1FBQ25CLElBQUksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUUzQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7SUFFbkMsQ0FBQztJQUlELFlBQVk7UUFFUixPQUFPLEdBQUksa0JBQWtCLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUUsR0FBSSxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBRSxFQUFFLENBQUM7SUFFMUcsQ0FBQztJQUtELFdBQVc7UUFFUCxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUE7UUFFM0MsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFBO1FBRTFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLG1CQUFtQixFQUFFLEdBQUksSUFBSSxDQUFDLElBQUssRUFBRSxDQUFDLENBQUE7UUFHN0QsbUJBQW1CO1FBQ25CLElBQUksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUc3QyxPQUFPLElBQUksQ0FBQztJQUVoQixDQUFDO0lBS0QsUUFBUSxDQUFDLFFBQWdCLEVBQUUsS0FBNEM7UUFFbkUsSUFBSSxDQUFDLEtBQUssQ0FBRSxRQUFRLENBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFFLFFBQVEsQ0FBRSxJQUFJLEVBQUUsQ0FBQztRQUV0RCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFFLFFBQVEsQ0FBRSxDQUFDLE1BQU0sQ0FBQTtRQUUxQyxJQUFJLENBQUMsS0FBSyxDQUFFLFFBQVEsQ0FBRSxDQUFFLElBQUksQ0FBRSxHQUFHLEtBQUssQ0FBQTtRQUV0QyxtQkFBbUI7UUFDbkIsSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsZUFBZSxFQUFFLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQXNCLENBQUMsQ0FBQztRQUV4RixPQUFPLElBQUksQ0FBQztJQUVoQixDQUFDO0lBSUQsU0FBUyxDQUFDLFVBQTRCO1FBRWxDLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxJQUFFLEVBQUUsQ0FBQyxDQUFBO1FBRTlDLElBQUcsT0FBTyxDQUFDLE1BQU0sRUFBQztZQUVkLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFBLEVBQUUsQ0FBQSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFFLENBQUE7U0FFNUU7UUFFRCxPQUFPLElBQUksQ0FBQztJQUVoQixDQUFDO0lBSUQsU0FBUztRQUlMOztXQUVHO1FBRUYsSUFBRyxJQUFJLENBQUMsSUFBSSxFQUFDO1lBRVYsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQSxFQUFFO2dCQUU3QixJQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLFVBQVUsRUFBQztvQkFFekIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO29CQUVsQixJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7d0JBRXhCLGFBQWE7d0JBQ2IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO29CQUVwQyxDQUFDLENBQUMsQ0FBQTtpQkFFTDtZQUVMLENBQUMsQ0FBQyxDQUFBO1NBRUw7UUFFRDs7V0FFRztRQUlILE9BQU8sSUFBSSxDQUFDO0lBRWhCLENBQUM7SUFLRCxNQUFNLENBQUMsSUFBWTtRQUVmLE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFeEMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUE7UUFFcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFFeEIsT0FBTyxDQUFDLENBQUM7SUFFYixDQUFDO0lBS0QsS0FBSztRQUVEOztXQUVHO1FBRUgsSUFBRyxJQUFJLENBQUMsS0FBSyxFQUFDO1lBRVYsTUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUVyQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUMsRUFBRTtnQkFFbEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksR0FFNUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLE9BQU87b0JBRWhELENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUssUUFBUyxFQUV6QixJQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFFLEdBQUcsQ0FBQyxDQUFBO1lBRTFCLENBQUMsQ0FBQyxDQUFBO1NBRUw7UUFFRCxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFcEMsbUJBQW1CO1FBQ25CLElBQUksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV6QyxPQUFPLElBQUksQ0FBQztJQUVoQixDQUFDO0NBSUo7QUFRRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsSUFBYTtJQUUxQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBRXBDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUE7SUFFdEMsSUFBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUM7UUFBRSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUFFO1NBRTNFLElBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFDO1FBQUUsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7S0FBRTtJQUVyRixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFbEIsQ0FBQztBQUtELE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxLQUFXO0lBRXpDLFFBQU8sT0FBTyxLQUFLLEVBQUM7UUFFaEIsS0FBSyxRQUFRO1lBQ1QsT0FBTyxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQTtRQUV6QixLQUFLLFFBQVE7WUFFVCxJQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUM7Z0JBQUUsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQSxFQUFFLENBQUEsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUFFO2lCQUVoRTtnQkFBRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQSxFQUFFLENBQUEsR0FBRyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7YUFBRTtRQUU3RSxLQUFLLFFBQVE7WUFDVCxPQUFPLEtBQUssQ0FBQTtLQUVuQjtJQUdELE9BQU8sRUFBRSxDQUFBO0FBRWIsQ0FBQztBQUlELE1BQU0sVUFBVSxZQUFZLENBQUMsT0FBMEI7SUFFbkQsTUFBTSxJQUFJLEdBQWEsRUFBRSxDQUFDO0lBRTFCLE1BQU0sU0FBUyxHQUFhLEVBQUUsQ0FBQztJQUUvQixNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFFekMsTUFBTSxDQUFDLE9BQU8sQ0FBRSxPQUFPLENBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFFdEMsTUFBTSxDQUFDLE1BQU0sQ0FBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQSxFQUFFO1lBRTFELFNBQVMsQ0FBRSxTQUFTLENBQUMsTUFBTSxDQUFFLEdBQUcsUUFBUSxDQUFBO1lBRXhDLE1BQU0sRUFBRSxHQUFhLEVBQUUsQ0FBQTtZQUV2QixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQSxFQUFFO2dCQUUxQixNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUEsRUFBRTtvQkFFekIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQSxFQUFFO3dCQUU1QyxnQkFBZ0IsQ0FBQyxDQUFDLEdBQUksSUFBSyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQSxFQUFFOzRCQUU1RSxFQUFFLENBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBRSxHQUFHLEdBQUksQ0FBRSxJQUFLLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxFQUFFLENBQUUsRUFBRSxDQUFBO3dCQUUvRCxDQUFDLENBQUMsQ0FBQTtvQkFFTixDQUFDLENBQUMsQ0FBQTtnQkFFTixDQUFDLENBQUMsQ0FBQTtZQUVOLENBQUMsQ0FBQyxDQUFBO1lBRUYsSUFBSSxDQUFFLElBQUksQ0FBQyxNQUFNLENBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBRXRDLENBQUMsQ0FBQyxDQUFBO0lBRU4sQ0FBQyxDQUFDLENBQUE7SUFFRixPQUFPLEVBQUMsU0FBUyxFQUFFLElBQUksRUFBQyxDQUFBO0FBRTVCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUT2JqZWN0RW1iZWQgfSBmcm9tIFwiLlwiO1xuaW1wb3J0IHsgU2Vuc2VuRW1pdHRlciB9IGZyb20gXCIuL2VtaXR0ZXJcIjtcbmltcG9ydCB7IFNlbnNlbk1ldHJpY1JhbmRvbSB9IGZyb20gXCIuL21ldHJpYy1yYW5kb21cIjtcblxuXG5cblxuXG5leHBvcnQgaW50ZXJmYWNlIFRBcHBlYXJhbmNlRGVjbGFyYXRpb25zIGV4dGVuZHMgT21pdDxDU1NTdHlsZURlY2xhcmF0aW9uLCAnd2lkdGgnIHwgJ2hlaWdodCcgfCAnbWFyZ2luJyB8ICdwYWRkaW5nJz57XG4gICAgXG4gICAgd2lkdGg/OiAnYXV0bycgfCAnaW5pdGlhbCcgfCAnaW5oZXJpdCcgfCAndW5zZXQnIHwgbnVtYmVyIHwgc3RyaW5nO1xuICAgIGhlaWdodD86ICdhdXRvJyB8ICdpbml0aWFsJyB8ICdpbmhlcml0JyB8ICd1bnNldCcgfCBudW1iZXIgfCBzdHJpbmc7XG4gICAgXG4gICAgXG4gICAgcGFkZGluZ1ZlcnRpY2FsPzogJ2F1dG8nIHwgJ2luaXRpYWwnIHwgJ2luaGVyaXQnIHwgJ3Vuc2V0JyB8IG51bWJlciB8IHN0cmluZztcbiAgICBwYWRkaW5nSG9yaXpvbnRhbD86ICdhdXRvJyB8ICdpbml0aWFsJyB8ICdpbmhlcml0JyB8ICd1bnNldCcgfCBudW1iZXIgfCBzdHJpbmc7XG4gICAgXG4gICAgbWFyZ2luVmVydGljYWw/OiAnYXV0bycgfCAnaW5pdGlhbCcgfCAnaW5oZXJpdCcgfCAndW5zZXQnIHwgbnVtYmVyIHwgc3RyaW5nO1xuICAgIG1hcmdpbkhvcml6b250YWw/OiAnYXV0bycgfCAnaW5pdGlhbCcgfCAnaW5oZXJpdCcgfCAndW5zZXQnIHwgbnVtYmVyIHwgc3RyaW5nO1xuICAgIFxuICAgIHBhZGRpbmc/OiAnYXV0bycgfCAnaW5pdGlhbCcgfCAnaW5oZXJpdCcgfCAndW5zZXQnIHwgKHN0cmluZyB8IG51bWJlcilbXSB8IG51bWJlciB8IHN0cmluZztcbiAgICBtYXJnaW4/OiAnYXV0bycgfCAnaW5pdGlhbCcgfCAnaW5oZXJpdCcgfCAndW5zZXQnIHwgKHN0cmluZyB8IG51bWJlcilbXSB8IG51bWJlciB8IHN0cmluZztcblxuICAgIGJhY2tkcm9wRmlsdGVyPzogJ2F1dG8nIHwgJ2luaXRpYWwnIHwgJ2luaGVyaXQnIHwgJ3Vuc2V0JyB8IHN0cmluZztcblxuICAgIHNjcm9sbGJhcldpZHRoPzogJ2F1dG8nIHwgJ2luaXRpYWwnIHwgJ2luaGVyaXQnIHwgJ3Vuc2V0JyB8IHN0cmluZztcblxufVxuXG5cblxuXG5leHBvcnQgdHlwZSBUQXBwZWFyYW5jZUVudHJ5ID0ge1xuICAgIHNlbGVjdG9yOiBzdHJpbmcsIFxuICAgIHZhbHVlOiBUT2JqZWN0RW1iZWQ8VEFwcGVhcmFuY2VEZWNsYXJhdGlvbnM+LFxuICAgIHJhbms6IG51bWJlclxufVxuXG5cblxuXG5leHBvcnQgdHlwZSBUQXBwZWFyYW5jZVByb3BzID0ge1xuXG4gICAgW3NlbGVjdG9yOiBzdHJpbmddIDogVE9iamVjdEVtYmVkPFRBcHBlYXJhbmNlRGVjbGFyYXRpb25zPltdXG4gICAgXG59XG5cblxuXG5leHBvcnQgdHlwZSBUQXBwZWFyYW5jZUVtaXR0ZXIgPSB7XG5cbiAgICBjb25zdHJ1Y3Q6IChjb21wb25lbnQ6IFNlbnNlbkFwcGVhcmFuY2UpID0+IHZvaWQ7XG5cbiAgICBpbml0aWFsaXplZDogKGNvbXBvbmVudDogU2Vuc2VuQXBwZWFyYW5jZSkgPT4gdm9pZDtcblxuICAgIG1vdW50ZWQ6IChjb21wb25lbnQ6IFNlbnNlbkFwcGVhcmFuY2UpID0+IHZvaWQ7XG5cbiAgICBzZWxlY3RvckFkZGVkOiAoZW50cnk6IFRBcHBlYXJhbmNlRW50cnkpID0+IHZvaWQ7XG4gICAgXG59XG5cblxuXG5cbmV4cG9ydCBjbGFzcyBTZW5zZW5BcHBlYXJhbmNle1xuXG5cbiAgICAkZG9tOiBIVE1MU3R5bGVFbGVtZW50ID0ge30gYXMgSFRNTFN0eWxlRWxlbWVudFxuXG4gICAgJFVpRDogc3RyaW5nID0gJyc7XG5cbiAgICAkZW1pdHRlcjogU2Vuc2VuRW1pdHRlciA9IHt9IGFzIFNlbnNlbkVtaXR0ZXJcbiAgICBcbiAgICBwcm9wczogVEFwcGVhcmFuY2VQcm9wcyA9IHt9IGFzIFRBcHBlYXJhbmNlUHJvcHNcbiAgICBcbiAgICBlbWl0OiBUQXBwZWFyYW5jZUVtaXR0ZXIgPSB7fSBhcyBUQXBwZWFyYW5jZUVtaXR0ZXJcblxuXG4gICAgJHJlZnMgOiB7IFtLOnN0cmluZ10gOiBUZXh0IH0gPSB7fVxuICAgIFxuICAgIFxuICAgIFxuICAgIGNvbnN0cnVjdG9yKHByb3BzPzogVEFwcGVhcmFuY2VQcm9wcyl7XG5cblxuICAgICAgICB0aGlzLiRkb20gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXG4gICAgICAgIHRoaXMuJFVpRCA9IHRoaXMuJGdlbmVyYXRlVWlEKClcblxuICAgICAgICB0aGlzLiRlbWl0dGVyID0gbmV3IFNlbnNlbkVtaXR0ZXIoKTtcblxuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHMgfHwge30gYXMgVEFwcGVhcmFuY2VQcm9wc1xuXG5cblxuICAgICAgICAvKiogKiBFbWl0IEV2ZW50ICovXG4gICAgICAgIHRoaXMuJGVtaXR0ZXI/LmRpc3BhdGNoKCdjb25zdHJ1Y3QnLCB0aGlzKTtcblxuICAgICAgICB0aGlzLiRlbWl0dGluZygpLiRpbml0aWFsaXplKCk7XG4gICAgICAgIFxuICAgIH1cblxuXG5cbiAgICAkZ2VuZXJhdGVVaUQoKXtcblxuICAgICAgICByZXR1cm4gYCR7IFNlbnNlbk1ldHJpY1JhbmRvbS5DcmVhdGVBcGxwaGEoMTIpLmpvaW4oJycpIH0keyBTZW5zZW5NZXRyaWNSYW5kb20uQ3JlYXRlKDIwKS5qb2luKCcnKSB9YDtcblxuICAgIH1cblxuXG4gICAgXG5cbiAgICAkaW5pdGlhbGl6ZSgpe1xuXG4gICAgICAgIHRoaXMuJGRvbS5zZXRBdHRyaWJ1dGUoJ3JlbCcsICdTdHlsZVNoZWV0JylcblxuICAgICAgICB0aGlzLiRkb20uc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvY3NzJylcblxuICAgICAgICB0aGlzLiRkb20uc2V0QXR0cmlidXRlKCdzZW5zZW4tYXBwZWFyYW5jZScsIGAkeyB0aGlzLiRVaUQgfWApXG5cblxuICAgICAgICAvKiogKiBFbWl0IEV2ZW50ICovXG4gICAgICAgIHRoaXMuJGVtaXR0ZXI/LmRpc3BhdGNoKCdpbml0aWFsaXplZCcsIHRoaXMpO1xuXG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIFxuICAgIH1cbiAgICBcblxuXG5cbiAgICBzZWxlY3RvcihzZWxlY3Rvcjogc3RyaW5nLCB2YWx1ZTogVE9iamVjdEVtYmVkPFRBcHBlYXJhbmNlRGVjbGFyYXRpb25zPil7XG5cbiAgICAgICAgdGhpcy5wcm9wc1sgc2VsZWN0b3IgXSA9IHRoaXMucHJvcHNbIHNlbGVjdG9yIF0gfHwgW107XG5cbiAgICAgICAgY29uc3QgcmFuayA9IHRoaXMucHJvcHNbIHNlbGVjdG9yIF0ubGVuZ3RoXG5cbiAgICAgICAgdGhpcy5wcm9wc1sgc2VsZWN0b3IgXVsgcmFuayBdID0gdmFsdWVcbiAgICAgICAgXG4gICAgICAgIC8qKiAqIEVtaXQgRXZlbnQgKi9cbiAgICAgICAgdGhpcy4kZW1pdHRlcj8uZGlzcGF0Y2goJ3NlbGVjdG9yQWRkZWQnLCB7IHNlbGVjdG9yLCB2YWx1ZSwgcmFuayB9IGFzIFRBcHBlYXJhbmNlRW50cnkpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBcbiAgICB9XG5cblxuXG4gICAgc2VsZWN0b3JzKGFwcGVhcmFuY2U6IFRBcHBlYXJhbmNlUHJvcHMpe1xuXG4gICAgICAgIGNvbnN0IGVudHJpZXMgPSBPYmplY3QuZW50cmllcyhhcHBlYXJhbmNlfHx7fSlcblxuICAgICAgICBpZihlbnRyaWVzLmxlbmd0aCl7XG5cbiAgICAgICAgICAgIGVudHJpZXMubWFwKCQ9PiAoJFsxXXx8W10pLm1hcChzZWxlY3Rvcj0+dGhpcy5zZWxlY3RvcigkWzBdLCBzZWxlY3RvcikpIClcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgXG4gICAgfVxuXG5cblxuICAgICRlbWl0dGluZygpe1xuXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3VzdG9tIEVtaXR0ZXIgTGlzdGVuZXIgOiBCZWdpblxuICAgICAgICAgKi9cblxuICAgICAgICAgaWYodGhpcy5lbWl0KXtcblxuICAgICAgICAgICAgT2JqZWN0LmVudHJpZXModGhpcy5lbWl0KS5tYXAoZT0+e1xuXG4gICAgICAgICAgICAgICAgaWYodHlwZW9mIGVbMV0gPT0gJ2Z1bmN0aW9uJyl7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZW1pdHRlcj8ubGlzdGVuKGVbMF0sIGZ1bmN0aW9uKCl7IFxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgICAgICBlWzFdLmFwcGx5KHRoaXMsIFthcmd1bWVudHNbMF1dKSBcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDdXN0b20gRW1pdHRlciBMaXN0ZW5lciA6IEVuZFxuICAgICAgICAgKi9cblxuXG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIFxuICAgIH1cblxuXG5cblxuICAgIHJlbmRlcihzbG90OiBzdHJpbmcpe1xuXG4gICAgICAgIGNvbnN0IGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzbG90KTtcblxuICAgICAgICBlLnRleHRDb250ZW50ID0gc2xvdFxuXG4gICAgICAgIHRoaXMuJGRvbS5hcHBlbmRDaGlsZChlKVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIFxuICAgIH1cbiAgICBcblxuXG5cbiAgICBtb3VudCgpe1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCdWlsZGluZ1xuICAgICAgICAgKi9cblxuICAgICAgICBpZih0aGlzLnByb3BzKXtcblxuICAgICAgICAgICAgY29uc3Qgc2xvdCA9IE9JQXBwZWFyYW5jZSh0aGlzLnByb3BzKVxuXG4gICAgICAgICAgICBzbG90LnNlbGVjdG9ycy5mb3JFYWNoKChzZWxlY3Rvciwgayk9PntcblxuICAgICAgICAgICAgICAgIHRoaXMuJHJlZnNbc2VsZWN0b3JdID0gdGhpcy5yZW5kZXIoYC4ke3RoaXMuJFVpRH0ke1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAoc2VsZWN0b3IpLnRyaW0oKS50b0xvY2FsZUxvd2VyQ2FzZSgpID09ICckc2VsZidcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgPyBgYCA6IGAgJHsgc2VsZWN0b3IgfWBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9eyR7IHNsb3Qucm93c1trXSB9fWApXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQodGhpcy4kZG9tKVxuXG4gICAgICAgIC8qKiAqIEVtaXQgRXZlbnQgKi9cbiAgICAgICAgdGhpcy4kZW1pdHRlcj8uZGlzcGF0Y2goJ21vdW50ZWQnLCB0aGlzKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxufVxuXG5cblxuXG5cblxuXG5leHBvcnQgZnVuY3Rpb24gT0lBcHBlYXJhbmNlUHJvcChwcm9wIDogc3RyaW5nKSA6IHN0cmluZ1tde1xuXG4gICAgY29uc3QgbXYgPSBwcm9wLmluZGV4T2YoJy12ZXJ0aWNhbCcpXG5cbiAgICBjb25zdCBtaCA9IHByb3AuaW5kZXhPZignLWhvcml6b250YWwnKVxuXG4gICAgaWYobXYgPiAtMSl7IGNvbnN0IHAgPSBwcm9wLnN1YnN0cigwLCBtdik7IHJldHVybiBbYCR7cH0tdG9wYCwgYCR7cH0tYm90dG9tYF07IH1cblxuICAgIGVsc2UgaWYobWggPiAtMSl7IGNvbnN0IHAgPSBwcm9wLnN1YnN0cigwLCBtaCk7IHJldHVybiBbYCR7cH0tbGVmdGAsIGAke3B9LXJpZ2h0YF07IH1cblxuICAgIHJldHVybiBbcHJvcF07XG4gICAgXG59XG5cblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBPSUFwcGVhcmFuY2VWYWx1ZSh2YWx1ZSA6IGFueSkgOiBzdHJpbmd7XG5cbiAgICBzd2l0Y2godHlwZW9mIHZhbHVlKXtcblxuICAgICAgICBjYXNlICdudW1iZXInOiBcbiAgICAgICAgICAgIHJldHVybiAoYCR7dmFsdWV9cHhgKVxuXG4gICAgICAgIGNhc2UgJ29iamVjdCc6XG5cbiAgICAgICAgICAgIGlmKEFycmF5LmlzQXJyYXkodmFsdWUpKXsgcmV0dXJuIHZhbHVlLm1hcChpPT5gJHtpfXB4YCkuam9pbignICcpOyB9XG5cbiAgICAgICAgICAgIGVsc2V7IHJldHVybiBPYmplY3Qua2V5cyh2YWx1ZSkubWFwKGs9PmAke2t9eyAke3ZhbHVlW2tdfSB9YCkuam9pbignICcpIH1cblxuICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgIFxuICAgIH1cbiAgICBcblxuICAgIHJldHVybiAnJ1xuICAgIFxufVxuXG5cblxuZXhwb3J0IGZ1bmN0aW9uIE9JQXBwZWFyYW5jZShlbnRyaWVzIDogVEFwcGVhcmFuY2VQcm9wcyl7XG5cbiAgICBjb25zdCByb3dzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgY29uc3Qgc2VsZWN0b3JzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgY29uc3QgbWFqUmV4ID0gbmV3IFJlZ0V4cChcIihbQS1aXSlcIiwgXCJnXCIpXG5cbiAgICBPYmplY3QuZW50cmllcyggZW50cmllcyApLmZvckVhY2goZW50cnkgPT57XG5cbiAgICAgICAgT2JqZWN0LnZhbHVlcyggZW50cnlbMF0udHJpbSgpLnNwbGl0KCcsJykgKS5mb3JFYWNoKHNlbGVjdG9yPT57XG5cbiAgICAgICAgICAgIHNlbGVjdG9yc1sgc2VsZWN0b3JzLmxlbmd0aCBdID0gc2VsZWN0b3JcblxuICAgICAgICAgICAgY29uc3Qgcnc6IHN0cmluZ1tdID0gW11cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZW50cnlbMV0ucmV2ZXJzZSgpLm1hcCh2YWx1ZT0+e1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKHZhbHVlKS5tYXAoJD0+e1xuXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC52YWx1ZXMoJFswXS50cmltKCkuc3BsaXQoJywnKSkubWFwKHByb3A9PntcblxuICAgICAgICAgICAgICAgICAgICAgICAgT0lBcHBlYXJhbmNlUHJvcCgoYCR7IHByb3AgfWApLnJlcGxhY2UobWFqUmV4LCAnLSQmJykudG9Mb3dlckNhc2UoKSkuZm9yRWFjaChwPT57XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByd1sgcncubGVuZ3RoIF0gPSBgJHsgcCB9OiR7IE9JQXBwZWFyYW5jZVZhbHVlKCRbMV18fCcnKSB9YFxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICByb3dzWyByb3dzLmxlbmd0aCBdID0gcncuam9pbignOycpXG5cbiAgICAgICAgfSlcblxuICAgIH0pXG4gICAgXG4gICAgcmV0dXJuIHtzZWxlY3RvcnMsIHJvd3N9XG4gICAgXG59XG4iXX0=