export class SensenFxEngine {
    constructor(options) {
        this.options = options;
        this.defaultFrame = 1000 / 60;
    }
    Start() {
        const interpolarity = [];
        const frame = this.options.duration / (this.options.frame || this.defaultFrame);
        /**
         * Profilling
         */
        this.options.from.forEach((v, k) => {
            const delta = (Math.abs(this.options.to[k] - v) / frame);
            const sens = this.options.to[k] > v;
            let from = v;
            let to = sens ? this.options.to[k] + delta : this.options.to[k] - delta;
            interpolarity[k] = [];
            if (sens) {
                for (let x = from; x <= to; x += delta) {
                    interpolarity[k][interpolarity[k].length] = x >= this.options.to[k] ? this.options.to[k] : x;
                }
            }
            else {
                for (let x = from; x >= to; x -= delta) {
                    interpolarity[k][interpolarity[k].length] = (x <= this.options.to[k]) ? this.options.to[k] : x;
                }
            }
        });
        /**
         * Play
         */
        if (!interpolarity.length) {
            throw (`Sensen.Fx.Engine : No Interpolarity Data < ${JSON.stringify(interpolarity)} >`);
        }
        let x = 0;
        const limit = interpolarity[0].length - 1;
        const player = () => {
            const couple = interpolarity.map(entry => entry[x]);
            const percent = (x / limit) * 100;
            if (x >= limit) {
                this.options.hit(interpolarity.map(entry => entry[limit]), this, percent);
                if (typeof this.options.done == 'function') {
                    this.options.done(this);
                }
            }
            else {
                x++;
                this.options.hit(couple, this, percent);
                globalThis.requestAnimationFrame(player);
            }
        };
        /**
         * Trigger Engine
         */
        player();
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzQ0EsTUFBTSxPQUFPLGNBQWM7SUFVdkIsWUFBWSxPQUF3QjtRQUVoQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUV2QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7SUFFbEMsQ0FBQztJQUlELEtBQUs7UUFHRCxNQUFNLGFBQWEsR0FBZSxFQUFFLENBQUE7UUFFcEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUE7UUFHL0U7O1dBRUc7UUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEVBQUU7WUFFN0IsTUFBTSxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBRTNELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUVwQyxJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7WUFFYixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBR3hFLGFBQWEsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7WUFFckIsSUFBRyxJQUFJLEVBQUM7Z0JBRUosS0FBSyxJQUFJLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUUsS0FBSyxFQUFFO29CQUVsQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFFaEc7YUFFSjtpQkFFRztnQkFFQSxLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBRSxLQUFLLEVBQUU7b0JBRWxDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFFbEc7YUFFSjtRQUVMLENBQUMsQ0FBQyxDQUFBO1FBS0Y7O1dBRUc7UUFFSCxJQUFHLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBQztZQUVyQixNQUFNLENBQUMsOENBQStDLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFFLElBQUksQ0FBQyxDQUFDO1NBRTdGO1FBR0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRVYsTUFBTSxLQUFLLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFFMUMsTUFBTSxNQUFNLEdBQUcsR0FBRSxFQUFFO1lBRWYsTUFBTSxNQUFNLEdBQVksYUFBYSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBRSxDQUFBO1lBRTVELE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxHQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUVoQyxJQUFHLENBQUMsSUFBSSxLQUFLLEVBQUM7Z0JBRVYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUEsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFFekUsSUFBRyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLFVBQVUsRUFBQztvQkFFdEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBRTNCO2FBRUo7aUJBRUc7Z0JBRUEsQ0FBQyxFQUFFLENBQUM7Z0JBRUosSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFFeEMsVUFBVSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFBO2FBRTNDO1FBRUwsQ0FBQyxDQUFBO1FBRUQ7O1dBRUc7UUFFSCxNQUFNLEVBQUUsQ0FBQTtRQUdSLE9BQU8sSUFBSSxDQUFDO0lBRWhCLENBQUM7Q0FHSiIsInNvdXJjZXNDb250ZW50IjpbIlxuXG5leHBvcnQgdHlwZSBTZW5zZW5GeE9wdGlvbnMgPSB7XG5cbiAgICBmcm9tOiBudW1iZXJbXSxcbiAgIFxuICAgIHRvOiBudW1iZXJbXSxcbiAgIFxuICAgIGR1cmF0aW9uOiBudW1iZXIsXG4gICBcbiAgICBmcmFtZT86IG51bWJlcixcbiAgIFxuICAgIGhpdDogKGludGVycG9sYXJpdHk6IG51bWJlcltdLCBlbmdpbmU6IFNlbnNlbkZ4RW5naW5lLCBwZXJjZW50OiBudW1iZXIpID0+IHZvaWRcbiAgIFxuICAgIGRvbmU/OiAoZW5naW5lOiBTZW5zZW5GeEVuZ2luZSkgPT4gdm9pZFxuICAgIFxufVxuXG5cblxuXG5leHBvcnQgaW50ZXJmYWNlIFNlbnNlbkZ4VHJhbnNpdGlvbntcblxuICAgIGVudHJ5OiAoVz86IEhUTUxFbGVtZW50KSA9PiBQcm9taXNlPEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkPjtcblxuICAgIGVudHJ5UmV2ZXJzZTogKFc/OiBIVE1MRWxlbWVudCkgPT4gUHJvbWlzZTxIVE1MRWxlbWVudCB8IHVuZGVmaW5lZD47XG5cbiAgICBleGl0OiAoVz86IEhUTUxFbGVtZW50KSA9PiBQcm9taXNlPEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkPjtcblxuICAgIGV4aXRSZXZlcnNlOiAoVz86IEhUTUxFbGVtZW50KSA9PiBQcm9taXNlPEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkPjtcbiAgICBcbn1cblxuXG5cblxuXG5cbmV4cG9ydCBjbGFzcyBTZW5zZW5GeEVuZ2luZXtcblxuXG4gICAgb3B0aW9uczogU2Vuc2VuRnhPcHRpb25zO1xuXG4gICAgZGVmYXVsdEZyYW1lOiBudW1iZXI7XG5cbiAgICB0aW1lcj86ICBOb2RlSlMuVGltZW91dDtcbiAgICBcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IFNlbnNlbkZ4T3B0aW9ucyl7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgICAgICB0aGlzLmRlZmF1bHRGcmFtZSA9IDEwMDAgLyA2MDtcbiAgICAgICAgXG4gICAgfVxuXG5cblxuICAgIFN0YXJ0KCl7XG5cblxuICAgICAgICBjb25zdCBpbnRlcnBvbGFyaXR5OiBudW1iZXJbXVtdID0gW11cblxuICAgICAgICBjb25zdCBmcmFtZSA9IHRoaXMub3B0aW9ucy5kdXJhdGlvbiAvICh0aGlzLm9wdGlvbnMuZnJhbWUgfHwgdGhpcy5kZWZhdWx0RnJhbWUpXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvZmlsbGluZ1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vcHRpb25zLmZyb20uZm9yRWFjaCgodixrKT0+e1xuXG4gICAgICAgICAgICBjb25zdCBkZWx0YSA9IChNYXRoLmFicyggdGhpcy5vcHRpb25zLnRvW2tdIC0gdiApIC8gZnJhbWUpO1xuXG4gICAgICAgICAgICBjb25zdCBzZW5zID0gdGhpcy5vcHRpb25zLnRvW2tdID4gdjtcblxuICAgICAgICAgICAgbGV0IGZyb20gPSB2O1xuXG4gICAgICAgICAgICBsZXQgdG8gPSBzZW5zID8gdGhpcy5vcHRpb25zLnRvW2tdICsgZGVsdGEgOiB0aGlzLm9wdGlvbnMudG9ba10gLSBkZWx0YTtcbiAgICAgICAgICAgIFxuXG4gICAgICAgICAgICBpbnRlcnBvbGFyaXR5W2tdID0gW11cblxuICAgICAgICAgICAgaWYoc2Vucyl7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCB4ID0gZnJvbTsgeCA8PSB0bzsgeCs9ZGVsdGEpIHsgXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpbnRlcnBvbGFyaXR5W2tdW2ludGVycG9sYXJpdHlba10ubGVuZ3RoXSA9IHggPj0gdGhpcy5vcHRpb25zLnRvW2tdID8gdGhpcy5vcHRpb25zLnRvW2tdIDogeDsgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsc2V7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCB4ID0gZnJvbTsgeCA+PSB0bzsgeC09ZGVsdGEpIHsgXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpbnRlcnBvbGFyaXR5W2tdW2ludGVycG9sYXJpdHlba10ubGVuZ3RoXSA9ICh4IDw9IHRoaXMub3B0aW9ucy50b1trXSkgPyB0aGlzLm9wdGlvbnMudG9ba10gOiB4OyBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfSlcbiAgICAgICAgXG5cblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQbGF5XG4gICAgICAgICAqL1xuICAgICAgICBcbiAgICAgICAgaWYoIWludGVycG9sYXJpdHkubGVuZ3RoKXsgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRocm93IChgU2Vuc2VuLkZ4LkVuZ2luZSA6IE5vIEludGVycG9sYXJpdHkgRGF0YSA8ICR7IEpTT04uc3RyaW5naWZ5KGludGVycG9sYXJpdHkpIH0gPmApOyBcbiAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG5cbiAgICAgICAgbGV0IHggPSAwO1xuXG4gICAgICAgIGNvbnN0IGxpbWl0ID0gaW50ZXJwb2xhcml0eVswXS5sZW5ndGggLSAxO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgcGxheWVyID0gKCk9PntcblxuICAgICAgICAgICAgY29uc3QgY291cGxlOm51bWJlcltdID0gaW50ZXJwb2xhcml0eS5tYXAoZW50cnk9PiBlbnRyeVt4XSApXG5cbiAgICAgICAgICAgIGNvbnN0IHBlcmNlbnQgPSAoeC9saW1pdCkgKiAxMDA7XG5cbiAgICAgICAgICAgIGlmKHggPj0gbGltaXQpe1xuXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmhpdChpbnRlcnBvbGFyaXR5Lm1hcChlbnRyeT0+IGVudHJ5W2xpbWl0XSksIHRoaXMsIHBlcmNlbnQpO1xuXG4gICAgICAgICAgICAgICAgaWYodHlwZW9mIHRoaXMub3B0aW9ucy5kb25lID09ICdmdW5jdGlvbicpe1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5kb25lKHRoaXMpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZWxzZXtcblxuICAgICAgICAgICAgICAgIHgrKztcblxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5oaXQoY291cGxlLCB0aGlzLCBwZXJjZW50KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBnbG9iYWxUaGlzLnJlcXVlc3RBbmltYXRpb25GcmFtZShwbGF5ZXIpXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogVHJpZ2dlciBFbmdpbmVcbiAgICAgICAgICovXG5cbiAgICAgICAgcGxheWVyKClcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgXG4gICAgfVxuXG4gICAgXG59Il19