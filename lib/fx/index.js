export class SensenFxEngine {
    constructor(options) {
        this.options = options;
        this.defaultFrame = 1000 / 60;
    }
    Start() {
        const interpolarity = [];
        const frame = this.options.duration / (this.options.frame || this.defaultFrame);
        /**
         * Profilling
         */
        this.options.from.forEach((v, k) => {
            const delta = (Math.abs(this.options.to[k] - v) / frame);
            const sens = this.options.to[k] > v;
            let from = v;
            let to = sens ? this.options.to[k] + delta : this.options.to[k] - delta;
            interpolarity[k] = [];
            if (sens) {
                for (let x = from; x <= to; x += delta) {
                    interpolarity[k][interpolarity[k].length] = x >= this.options.to[k] ? this.options.to[k] : x;
                }
            }
            else {
                for (let x = from; x >= to; x -= delta) {
                    interpolarity[k][interpolarity[k].length] = (x <= this.options.to[k]) ? this.options.to[k] : x;
                }
            }
        });
        /**
         * Play
         */
        if (!interpolarity.length) {
            throw (`Sensen.Fx.Engine : No Interpolarity Data < ${JSON.stringify(interpolarity)} >`);
        }
        let x = 0;
        const limit = interpolarity[0].length - 1;
        const player = () => {
            const couple = interpolarity.map(entry => entry[x]);
            const percent = (x / limit) * 100;
            if (x >= limit) {
                this.options.hit(interpolarity.map(entry => entry[limit]), this, percent);
                if (typeof this.options.done == 'function') {
                    this.options.done(this);
                }
            }
            else {
                x++;
                this.options.hit(couple, this, percent);
                globalThis.requestAnimationFrame(player);
            }
        };
        /**
         * Trigger Engine
         */
        player();
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9jb3JlL2Z4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNDQSxNQUFNLE9BQU8sY0FBYztJQVV2QixZQUFZLE9BQXdCO1FBRWhDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBRXZCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUVsQyxDQUFDO0lBSUQsS0FBSztRQUdELE1BQU0sYUFBYSxHQUFlLEVBQUUsQ0FBQTtRQUVwQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUcvRTs7V0FFRztRQUNILElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRTtZQUU3QixNQUFNLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7WUFFM0QsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRXBDLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztZQUViLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7WUFHeEUsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtZQUVyQixJQUFHLElBQUksRUFBQztnQkFFSixLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBRSxLQUFLLEVBQUU7b0JBRWxDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUVoRzthQUVKO2lCQUVHO2dCQUVBLEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFFLEtBQUssRUFBRTtvQkFFbEMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUVsRzthQUVKO1FBRUwsQ0FBQyxDQUFDLENBQUE7UUFLRjs7V0FFRztRQUVILElBQUcsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFDO1lBRXJCLE1BQU0sQ0FBQyw4Q0FBK0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUUsSUFBSSxDQUFDLENBQUM7U0FFN0Y7UUFHRCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFVixNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUUxQyxNQUFNLE1BQU0sR0FBRyxHQUFFLEVBQUU7WUFFZixNQUFNLE1BQU0sR0FBWSxhQUFhLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFFLENBQUE7WUFFNUQsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLEdBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBRWhDLElBQUcsQ0FBQyxJQUFJLEtBQUssRUFBQztnQkFFVixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUV6RSxJQUFHLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksVUFBVSxFQUFDO29CQUV0QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFFM0I7YUFFSjtpQkFFRztnQkFFQSxDQUFDLEVBQUUsQ0FBQztnQkFFSixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUV4QyxVQUFVLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUE7YUFFM0M7UUFFTCxDQUFDLENBQUE7UUFFRDs7V0FFRztRQUVILE1BQU0sRUFBRSxDQUFBO1FBR1IsT0FBTyxJQUFJLENBQUM7SUFFaEIsQ0FBQztDQUdKIiwic291cmNlc0NvbnRlbnQiOlsiXG5cbmV4cG9ydCB0eXBlIFNlbnNlbkZ4T3B0aW9ucyA9IHtcblxuICAgIGZyb206IG51bWJlcltdLFxuICAgXG4gICAgdG86IG51bWJlcltdLFxuICAgXG4gICAgZHVyYXRpb246IG51bWJlcixcbiAgIFxuICAgIGZyYW1lPzogbnVtYmVyLFxuICAgXG4gICAgaGl0OiAoaW50ZXJwb2xhcml0eTogbnVtYmVyW10sIGVuZ2luZTogU2Vuc2VuRnhFbmdpbmUsIHBlcmNlbnQ6IG51bWJlcikgPT4gdm9pZFxuICAgXG4gICAgZG9uZT86IChlbmdpbmU6IFNlbnNlbkZ4RW5naW5lKSA9PiB2b2lkXG4gICAgXG59XG5cblxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgU2Vuc2VuRnhUcmFuc2l0aW9ue1xuXG4gICAgZW50cnk6IChXPzogSFRNTEVsZW1lbnQpID0+IFByb21pc2U8SFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ+O1xuXG4gICAgZW50cnlSZXZlcnNlOiAoVz86IEhUTUxFbGVtZW50KSA9PiBQcm9taXNlPEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkPjtcblxuICAgIGV4aXQ6IChXPzogSFRNTEVsZW1lbnQpID0+IFByb21pc2U8SFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ+O1xuXG4gICAgZXhpdFJldmVyc2U6IChXPzogSFRNTEVsZW1lbnQpID0+IFByb21pc2U8SFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ+O1xuICAgIFxufVxuXG5cblxuXG5cblxuZXhwb3J0IGNsYXNzIFNlbnNlbkZ4RW5naW5le1xuXG5cbiAgICBvcHRpb25zOiBTZW5zZW5GeE9wdGlvbnM7XG5cbiAgICBkZWZhdWx0RnJhbWU6IG51bWJlcjtcblxuICAgIHRpbWVyPzogIE5vZGVKUy5UaW1lb3V0O1xuICAgIFxuXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogU2Vuc2VuRnhPcHRpb25zKXtcblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgICAgIHRoaXMuZGVmYXVsdEZyYW1lID0gMTAwMCAvIDYwO1xuICAgICAgICBcbiAgICB9XG5cblxuXG4gICAgU3RhcnQoKXtcblxuXG4gICAgICAgIGNvbnN0IGludGVycG9sYXJpdHk6IG51bWJlcltdW10gPSBbXVxuXG4gICAgICAgIGNvbnN0IGZyYW1lID0gdGhpcy5vcHRpb25zLmR1cmF0aW9uIC8gKHRoaXMub3B0aW9ucy5mcmFtZSB8fCB0aGlzLmRlZmF1bHRGcmFtZSlcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9maWxsaW5nXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9wdGlvbnMuZnJvbS5mb3JFYWNoKCh2LGspPT57XG5cbiAgICAgICAgICAgIGNvbnN0IGRlbHRhID0gKE1hdGguYWJzKCB0aGlzLm9wdGlvbnMudG9ba10gLSB2ICkgLyBmcmFtZSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHNlbnMgPSB0aGlzLm9wdGlvbnMudG9ba10gPiB2O1xuXG4gICAgICAgICAgICBsZXQgZnJvbSA9IHY7XG5cbiAgICAgICAgICAgIGxldCB0byA9IHNlbnMgPyB0aGlzLm9wdGlvbnMudG9ba10gKyBkZWx0YSA6IHRoaXMub3B0aW9ucy50b1trXSAtIGRlbHRhO1xuICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIGludGVycG9sYXJpdHlba10gPSBbXVxuXG4gICAgICAgICAgICBpZihzZW5zKXtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IHggPSBmcm9tOyB4IDw9IHRvOyB4Kz1kZWx0YSkgeyBcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGludGVycG9sYXJpdHlba11baW50ZXJwb2xhcml0eVtrXS5sZW5ndGhdID0geCA+PSB0aGlzLm9wdGlvbnMudG9ba10gPyB0aGlzLm9wdGlvbnMudG9ba10gOiB4OyBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWxzZXtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IHggPSBmcm9tOyB4ID49IHRvOyB4LT1kZWx0YSkgeyBcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGludGVycG9sYXJpdHlba11baW50ZXJwb2xhcml0eVtrXS5sZW5ndGhdID0gKHggPD0gdGhpcy5vcHRpb25zLnRvW2tdKSA/IHRoaXMub3B0aW9ucy50b1trXSA6IHg7IFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9KVxuICAgICAgICBcblxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBsYXlcbiAgICAgICAgICovXG4gICAgICAgIFxuICAgICAgICBpZighaW50ZXJwb2xhcml0eS5sZW5ndGgpeyBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhyb3cgKGBTZW5zZW4uRnguRW5naW5lIDogTm8gSW50ZXJwb2xhcml0eSBEYXRhIDwgJHsgSlNPTi5zdHJpbmdpZnkoaW50ZXJwb2xhcml0eSkgfSA+YCk7IFxuICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcblxuICAgICAgICBsZXQgeCA9IDA7XG5cbiAgICAgICAgY29uc3QgbGltaXQgPSBpbnRlcnBvbGFyaXR5WzBdLmxlbmd0aCAtIDE7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBwbGF5ZXIgPSAoKT0+e1xuXG4gICAgICAgICAgICBjb25zdCBjb3VwbGU6bnVtYmVyW10gPSBpbnRlcnBvbGFyaXR5Lm1hcChlbnRyeT0+IGVudHJ5W3hdIClcblxuICAgICAgICAgICAgY29uc3QgcGVyY2VudCA9ICh4L2xpbWl0KSAqIDEwMDtcblxuICAgICAgICAgICAgaWYoeCA+PSBsaW1pdCl7XG5cbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuaGl0KGludGVycG9sYXJpdHkubWFwKGVudHJ5PT4gZW50cnlbbGltaXRdKSwgdGhpcywgcGVyY2VudCk7XG5cbiAgICAgICAgICAgICAgICBpZih0eXBlb2YgdGhpcy5vcHRpb25zLmRvbmUgPT0gJ2Z1bmN0aW9uJyl7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmRvbmUodGhpcyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBlbHNle1xuXG4gICAgICAgICAgICAgICAgeCsrO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmhpdChjb3VwbGUsIHRoaXMsIHBlcmNlbnQpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGdsb2JhbFRoaXMucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHBsYXllcilcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUcmlnZ2VyIEVuZ2luZVxuICAgICAgICAgKi9cblxuICAgICAgICBwbGF5ZXIoKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBcbiAgICB9XG5cbiAgICBcbn0iXX0=