import { SensenEmitter } from "./emitter";
import { SensenMetricRandom } from "./metric-random";
export class SensenAppearance {
    constructor(props) {
        this.$dom = {};
        this.$UiD = '';
        this.$emitter = {};
        this.props = {};
        this.emit = {};
        this.$refs = {};
        this.$dom = document.createElement('style');
        this.$UiD = this.$generateUiD();
        this.$emitter = new SensenEmitter();
        this.props = props || {};
        /** * Emit Event */
        this.$emitter?.dispatch('construct', this);
        this.$emitting().$initialize();
    }
    $generateUiD() {
        return `${SensenMetricRandom.CreateAplpha(12).join('')}${SensenMetricRandom.Create(20).join('')}`;
    }
    $initialize() {
        this.$dom.setAttribute('rel', 'StyleSheet');
        this.$dom.setAttribute('type', 'text/css');
        this.$dom.setAttribute('sensen-appearance', `${this.$UiD}`);
        /** * Emit Event */
        this.$emitter?.dispatch('initialized', this);
        return this;
    }
    selector(selector, value) {
        this.props[selector] = this.props[selector] || [];
        const rank = this.props[selector].length;
        this.props[selector][rank] = value;
        /** * Emit Event */
        this.$emitter?.dispatch('selectorAdded', { selector, value, rank });
        return this;
    }
    selectors(appearance) {
        const entries = Object.entries(appearance || {});
        if (entries.length) {
            entries.map($ => ($[1] || []).map(selector => this.selector($[0], selector)));
        }
        return this;
    }
    $emitting() {
        /**
         * Custom Emitter Listener : Begin
         */
        if (this.emit) {
            Object.entries(this.emit).map(e => {
                if (typeof e[1] == 'function') {
                    const self = this;
                    this.$emitter?.listen(e[0], function () {
                        // @ts-ignore
                        e[1].apply(this, [arguments[0]]);
                    });
                }
            });
        }
        /**
         * Custom Emitter Listener : End
         */
        return this;
    }
    render(slot) {
        const e = document.createTextNode(slot);
        e.textContent = slot;
        this.$dom.appendChild(e);
        return e;
    }
    mount() {
        /**
         * Building
         */
        if (this.props) {
            const slot = OIAppearance(this.props);
            slot.selectors.forEach((selector, k) => {
                this.$refs[selector] = this.render(`.${this.$UiD}${(selector).trim().toLocaleLowerCase() == '$self'
                    ? `` : ` ${selector}`}{${slot.rows[k]}}`);
            });
        }
        document.head.appendChild(this.$dom);
        /** * Emit Event */
        this.$emitter?.dispatch('mounted', this);
        return this;
    }
}
export function OIAppearanceProp(prop) {
    const mv = prop.indexOf('-vertical');
    const mh = prop.indexOf('-horizontal');
    if (mv > -1) {
        const p = prop.substr(0, mv);
        return [`${p}-top`, `${p}-bottom`];
    }
    else if (mh > -1) {
        const p = prop.substr(0, mh);
        return [`${p}-left`, `${p}-right`];
    }
    return [prop];
}
export function OIAppearanceValue(value) {
    switch (typeof value) {
        case 'number':
            return (`${value}px`);
        case 'object':
            if (Array.isArray(value)) {
                return value.map(i => `${i}px`).join(' ');
            }
            else {
                return Object.keys(value).map(k => `${k}{ ${value[k]} }`).join(' ');
            }
        case 'string':
            return value;
    }
    return '';
}
export function OIAppearance(entries) {
    const rows = [];
    const selectors = [];
    const majRex = new RegExp("([A-Z])", "g");
    Object.entries(entries).forEach(entry => {
        Object.values(entry[0].trim().split(',')).forEach(selector => {
            selectors[selectors.length] = selector;
            const rw = [];
            entry[1].reverse().map(value => {
                Object.entries(value).map($ => {
                    Object.values($[0].trim().split(',')).map(prop => {
                        OIAppearanceProp((`${prop}`).replace(majRex, '-$&').toLowerCase()).forEach(p => {
                            rw[rw.length] = `${p}:${OIAppearanceValue($[1] || '')}`;
                        });
                    });
                });
            });
            rows[rows.length] = rw.join(';');
        });
    });
    return { selectors, rows };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwZWFyYW5jZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2NvcmUvYXBwZWFyYW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzFDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBOERyRCxNQUFNLE9BQU8sZ0JBQWdCO0lBa0J6QixZQUFZLEtBQXdCO1FBZnBDLFNBQUksR0FBcUIsRUFBc0IsQ0FBQTtRQUUvQyxTQUFJLEdBQVcsRUFBRSxDQUFDO1FBRWxCLGFBQVEsR0FBa0IsRUFBbUIsQ0FBQTtRQUU3QyxVQUFLLEdBQXFCLEVBQXNCLENBQUE7UUFFaEQsU0FBSSxHQUF1QixFQUF3QixDQUFBO1FBR25ELFVBQUssR0FBMkIsRUFBRSxDQUFBO1FBTzlCLElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU1QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQTtRQUUvQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7UUFFcEMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLElBQUksRUFBc0IsQ0FBQTtRQUk1QyxtQkFBbUI7UUFDbkIsSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRTNDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUVuQyxDQUFDO0lBSUQsWUFBWTtRQUVSLE9BQU8sR0FBSSxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBRSxHQUFJLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFFLEVBQUUsQ0FBQztJQUUxRyxD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LE9BQU8sRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFDLENBQUE7QUFFNUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRPYmplY3RFbWJlZCB9IGZyb20gXCIuXCI7XG5pbXBvcnQgeyBTZW5zZW5FbWl0dGVyIH0gZnJvbSBcIi4vZW1pdHRlclwiO1xuaW1wb3J0IHsgU2Vuc2VuTWV0cmljUmFuZG9tIH0gZnJvbSBcIi4vbWV0cmljLXJhbmRvbVwiO1xuXG5cblxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgVEFwcGVhcmFuY2VEZWNsYXJhdGlvbnMgZXh0ZW5kcyBPbWl0PENTU1N0eWxlRGVjbGFyYXRpb24sICd3aWR0aCcgfCAnaGVpZ2h0JyB8ICdtYXJnaW4nIHwgJ3BhZGRpbmcnPntcbiAgICBcbiAgICB3aWR0aD86ICdhdXRvJyB8ICdpbml0aWFsJyB8ICdpbmhlcml0JyB8ICd1bnNldCcgfCBudW1iZXIgfCBzdHJpbmc7XG4gICAgaGVpZ2h0PzogJ2F1dG8nIHwgJ2luaXRpYWwnIHwgJ2luaGVyaXQnIHwgJ3Vuc2V0JyB8IG51bWJlciB8IHN0cmluZztcbiAgICBcbiAgICBcbiAgICBwYWRkaW5nVmVydGljYWw/OiAnYXV0bycgfCAnaW5pdGlhbCcgfCAnaW5oZXJpdCcgfCAndW5zZXQnIHwgbnVtYmVyIHwgc3RyaW5nO1xuICAgIHBhZGRpbmdIb3Jpem9udGFsPzogJ2F1dG8nIHwgJ2luaXRpYWwnIHwgJ2luaGVyaXQnIHwgJ3Vuc2V0JyB8IG51bWJlciB8IHN0cmluZztcbiAgICBcbiAgICBtYXJnaW5WZXJ0aWNhbD86ICdhdXRvJyB8ICdpbml0aWFsJyB8ICdpbmhlcml0JyB8ICd1bnNldCcgfCBudW1iZXIgfCBzdHJpbmc7XG4gICAgbWFyZ2luSG9yaXpvbnRhbD86ICdhdXRvJyB8ICdpbml0aWFsJyB8ICdpbmhlcml0JyB8ICd1bnNldCcgfCBudW1iZXIgfCBzdHJpbmc7XG4gICAgXG4gICAgcGFkZGluZz86ICdhdXRvJyB8ICdpbml0aWFsJyB8ICdpbmhlcml0JyB8ICd1bnNldCcgfCAoc3RyaW5nIHwgbnVtYmVyKVtdIHwgbnVtYmVyIHwgc3RyaW5nO1xuICAgIG1hcmdpbj86ICdhdXRvJyB8ICdpbml0aWFsJyB8ICdpbmhlcml0JyB8ICd1bnNldCcgfCAoc3RyaW5nIHwgbnVtYmVyKVtdIHwgbnVtYmVyIHwgc3RyaW5nO1xuXG4gICAgYmFja2Ryb3BGaWx0ZXI/OiAnYXV0bycgfCAnaW5pdGlhbCcgfCAnaW5oZXJpdCcgfCAndW5zZXQnIHwgc3RyaW5nO1xuXG4gICAgc2Nyb2xsYmFyV2lkdGg/OiAnYXV0bycgfCAnaW5pdGlhbCcgfCAnaW5oZXJpdCcgfCAndW5zZXQnIHwgc3RyaW5nO1xuXG59XG5cblxuXG5cbmV4cG9ydCB0eXBlIFRBcHBlYXJhbmNlRW50cnkgPSB7XG4gICAgc2VsZWN0b3I6IHN0cmluZywgXG4gICAgdmFsdWU6IFRPYmplY3RFbWJlZDxUQXBwZWFyYW5jZURlY2xhcmF0aW9ucz4sXG4gICAgcmFuazogbnVtYmVyXG59XG5cblxuXG5cbmV4cG9ydCB0eXBlIFRBcHBlYXJhbmNlUHJvcHMgPSB7XG5cbiAgICBbc2VsZWN0b3I6IHN0cmluZ10gOiBUT2JqZWN0RW1iZWQ8VEFwcGVhcmFuY2VEZWNsYXJhdGlvbnM+W11cbiAgICBcbn1cblxuXG5cbmV4cG9ydCB0eXBlIFRBcHBlYXJhbmNlRW1pdHRlciA9IHtcblxuICAgIGNvbnN0cnVjdDogKGNvbXBvbmVudDogU2Vuc2VuQXBwZWFyYW5jZSkgPT4gdm9pZDtcblxuICAgIGluaXRpYWxpemVkOiAoY29tcG9uZW50OiBTZW5zZW5BcHBlYXJhbmNlKSA9PiB2b2lkO1xuXG4gICAgbW91bnRlZDogKGNvbXBvbmVudDogU2Vuc2VuQXBwZWFyYW5jZSkgPT4gdm9pZDtcblxuICAgIHNlbGVjdG9yQWRkZWQ6IChlbnRyeTogVEFwcGVhcmFuY2VFbnRyeSkgPT4gdm9pZDtcbiAgICBcbn1cblxuXG5cblxuZXhwb3J0IGNsYXNzIFNlbnNlbkFwcGVhcmFuY2V7XG5cblxuICAgICRkb206IEhUTUxTdHlsZUVsZW1lbnQgPSB7fSBhcyBIVE1MU3R5bGVFbGVtZW50XG5cbiAgICAkVWlEOiBzdHJpbmcgPSAnJztcblxuICAgICRlbWl0dGVyOiBTZW5zZW5FbWl0dGVyID0ge30gYXMgU2Vuc2VuRW1pdHRlclxuICAgIFxuICAgIHByb3BzOiBUQXBwZWFyYW5jZVByb3BzID0ge30gYXMgVEFwcGVhcmFuY2VQcm9wc1xuICAgIFxuICAgIGVtaXQ6IFRBcHBlYXJhbmNlRW1pdHRlciA9IHt9IGFzIFRBcHBlYXJhbmNlRW1pdHRlclxuXG5cbiAgICAkcmVmcyA6IHsgW0s6c3RyaW5nXSA6IFRleHQgfSA9IHt9XG4gICAgXG4gICAgXG4gICAgXG4gICAgY29uc3RydWN0b3IocHJvcHM/OiBUQXBwZWFyYW5jZVByb3BzKXtcblxuXG4gICAgICAgIHRoaXMuJGRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG5cbiAgICAgICAgdGhpcy4kVWlEID0gdGhpcy4kZ2VuZXJhdGVVaUQoKVxuXG4gICAgICAgIHRoaXMuJGVtaXR0ZXIgPSBuZXcgU2Vuc2VuRW1pdHRlcigpO1xuXG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcyB8fCB7fSBhcyBUQXBwZWFyYW5jZVByb3BzXG5cblxuXG4gICAgICAgIC8qKiAqIEVtaXQgRXZlbnQgKi9cbiAgICAgICAgdGhpcy4kZW1pdHRlcj8uZGlzcGF0Y2goJ2NvbnN0cnVjdCcsIHRoaXMpO1xuXG4gICAgICAgIHRoaXMuJGVtaXR0aW5nKCkuJGluaXRpYWxpemUoKTtcbiAgICAgICAgXG4gICAgfVxuXG5cblxuICAgICRnZW5lcmF0ZVVpRCgpe1xuXG4gICAgICAgIHJldHVybiBgJHsgU2Vuc2VuTWV0cmljUmFuZG9tLkNyZWF0ZUFwbHBoYSgxMikuam9pbignJykgfSR7IFNlbnNlbk1ldHJpY1JhbmRvbS5DcmVhdGUoMjApLmpvaW4oJycpIH1gO1xuXG4gICAgfVxuXG5cbiAgICBcblxuICAgICRpbml0aWFsaXplKCl7XG5cbiAgICAgICAgdGhpcy4kZG9tLnNldEF0dHJpYnV0ZSgncmVsJywgJ1N0eWxlU2hlZXQnKVxuXG4gICAgICAgIHRoaXMuJGRvbS5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9jc3MnKVxuXG4gICAgICAgIHRoaXMuJGRvbS5zZXRBdHRyaWJ1dGUoJ3NlbnNlbi1hcHBlYXJhbmNlJywgYCR7IHRoaXMuJFVpRCB9YClcblxuXG4gICAgICAgIC8qKiAqIEVtaXQgRXZlbnQgKi9cbiAgICAgICAgdGhpcy4kZW1pdHRlcj8uZGlzcGF0Y2goJ2luaXRpYWxpemVkJywgdGhpcyk7XG5cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgXG4gICAgfVxuICAgIFxuXG5cblxuICAgIHNlbGVjdG9yKHNlbGVjdG9yOiBzdHJpbmcsIHZhbHVlOiBUT2JqZWN0RW1iZWQ8VEFwcGVhcmFuY2VEZWNsYXJhdGlvbnM+KXtcblxuICAgICAgICB0aGlzLnByb3BzWyBzZWxlY3RvciBdID0gdGhpcy5wcm9wc1sgc2VsZWN0b3IgXSB8fCBbXTtcblxuICAgICAgICBjb25zdCByYW5rID0gdGhpcy5wcm9wc1sgc2VsZWN0b3IgXS5sZW5ndGhcblxuICAgICAgICB0aGlzLnByb3BzWyBzZWxlY3RvciBdWyByYW5rIF0gPSB2YWx1ZVxuICAgICAgICBcbiAgICAgICAgLyoqICogRW1pdCBFdmVudCAqL1xuICAgICAgICB0aGlzLiRlbWl0dGVyPy5kaXNwYXRjaCgnc2VsZWN0b3JBZGRlZCcsIHsgc2VsZWN0b3IsIHZhbHVlLCByYW5rIH0gYXMgVEFwcGVhcmFuY2VFbnRyeSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIFxuICAgIH1cblxuXG5cbiAgICBzZWxlY3RvcnMoYXBwZWFyYW5jZTogVEFwcGVhcmFuY2VQcm9wcyl7XG5cbiAgICAgICAgY29uc3QgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKGFwcGVhcmFuY2V8fHt9KVxuXG4gICAgICAgIGlmKGVudHJpZXMubGVuZ3RoKXtcblxuICAgICAgICAgICAgZW50cmllcy5tYXAoJD0+ICgkWzFdfHxbXSkubWFwKHNlbGVjdG9yPT50aGlzLnNlbGVjdG9yKCRbMF0sIHNlbGVjdG9yKSkgKVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBcbiAgICB9XG5cblxuXG4gICAgJGVtaXR0aW5nKCl7XG5cblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDdXN0b20gRW1pdHRlciBMaXN0ZW5lciA6IEJlZ2luXG4gICAgICAgICAqL1xuXG4gICAgICAgICBpZih0aGlzLmVtaXQpe1xuXG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyh0aGlzLmVtaXQpLm1hcChlPT57XG5cbiAgICAgICAgICAgICAgICBpZih0eXBlb2YgZVsxXSA9PSAnZnVuY3Rpb24nKXtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbWl0dGVyPy5saXN0ZW4oZVswXSwgZnVuY3Rpb24oKXsgXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIGVbMV0uYXBwbHkodGhpcywgW2FyZ3VtZW50c1swXV0pIFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEN1c3RvbSBFbWl0dGVyIExpc3RlbmVyIDogRW5kXG4gICAgICAgICAqL1xuXG5cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgXG4gICAgfVxuXG5cblxuXG4gICAgcmVuZGVyKHNsb3Q6IHN0cmluZyl7XG5cbiAgICAgICAgY29uc3QgZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHNsb3QpO1xuXG4gICAgICAgIGUudGV4dENvbnRlbnQgPSBzbG90XG5cbiAgICAgICAgdGhpcy4kZG9tLmFwcGVuZENoaWxkKGUpXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgXG4gICAgfVxuICAgIFxuXG5cblxuICAgIG1vdW50KCl7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJ1aWxkaW5nXG4gICAgICAgICAqL1xuXG4gICAgICAgIGlmKHRoaXMucHJvcHMpe1xuXG4gICAgICAgICAgICBjb25zdCBzbG90ID0gT0lBcHBlYXJhbmNlKHRoaXMucHJvcHMpXG5cbiAgICAgICAgICAgIHNsb3Quc2VsZWN0b3JzLmZvckVhY2goKHNlbGVjdG9yLCBrKT0+e1xuXG4gICAgICAgICAgICAgICAgdGhpcy4kcmVmc1tzZWxlY3Rvcl0gPSB0aGlzLnJlbmRlcihgLiR7dGhpcy4kVWlEfSR7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIChzZWxlY3RvcikudHJpbSgpLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT0gJyRzZWxmJ1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICA/IGBgIDogYCAkeyBzZWxlY3RvciB9YFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH17JHsgc2xvdC5yb3dzW2tdIH19YClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0aGlzLiRkb20pXG5cbiAgICAgICAgLyoqICogRW1pdCBFdmVudCAqL1xuICAgICAgICB0aGlzLiRlbWl0dGVyPy5kaXNwYXRjaCgnbW91bnRlZCcsIHRoaXMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG59XG5cblxuXG5cblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBPSUFwcGVhcmFuY2VQcm9wKHByb3AgOiBzdHJpbmcpIDogc3RyaW5nW117XG5cbiAgICBjb25zdCBtdiA9IHByb3AuaW5kZXhPZignLXZlcnRpY2FsJylcblxuICAgIGNvbnN0IG1oID0gcHJvcC5pbmRleE9mKCctaG9yaXpvbnRhbCcpXG5cbiAgICBpZihtdiA+IC0xKXsgY29uc3QgcCA9IHByb3Auc3Vic3RyKDAsIG12KTsgcmV0dXJuIFtgJHtwfS10b3BgLCBgJHtwfS1ib3R0b21gXTsgfVxuXG4gICAgZWxzZSBpZihtaCA+IC0xKXsgY29uc3QgcCA9IHByb3Auc3Vic3RyKDAsIG1oKTsgcmV0dXJuIFtgJHtwfS1sZWZ0YCwgYCR7cH0tcmlnaHRgXTsgfVxuXG4gICAgcmV0dXJuIFtwcm9wXTtcbiAgICBcbn1cblxuXG5cblxuZXhwb3J0IGZ1bmN0aW9uIE9JQXBwZWFyYW5jZVZhbHVlKHZhbHVlIDogYW55KSA6IHN0cmluZ3tcblxuICAgIHN3aXRjaCh0eXBlb2YgdmFsdWUpe1xuXG4gICAgICAgIGNhc2UgJ251bWJlcic6IFxuICAgICAgICAgICAgcmV0dXJuIChgJHt2YWx1ZX1weGApXG5cbiAgICAgICAgY2FzZSAnb2JqZWN0JzpcblxuICAgICAgICAgICAgaWYoQXJyYXkuaXNBcnJheSh2YWx1ZSkpeyByZXR1cm4gdmFsdWUubWFwKGk9PmAke2l9cHhgKS5qb2luKCcgJyk7IH1cblxuICAgICAgICAgICAgZWxzZXsgcmV0dXJuIE9iamVjdC5rZXlzKHZhbHVlKS5tYXAoaz0+YCR7a317ICR7dmFsdWVba119IH1gKS5qb2luKCcgJykgfVxuXG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgXG4gICAgfVxuICAgIFxuXG4gICAgcmV0dXJuICcnXG4gICAgXG59XG5cblxuXG5leHBvcnQgZnVuY3Rpb24gT0lBcHBlYXJhbmNlKGVudHJpZXMgOiBUQXBwZWFyYW5jZVByb3BzKXtcblxuICAgIGNvbnN0IHJvd3M6IHN0cmluZ1tdID0gW107XG5cbiAgICBjb25zdCBzZWxlY3RvcnM6IHN0cmluZ1tdID0gW107XG5cbiAgICBjb25zdCBtYWpSZXggPSBuZXcgUmVnRXhwKFwiKFtBLVpdKVwiLCBcImdcIilcblxuICAgIE9iamVjdC5lbnRyaWVzKCBlbnRyaWVzICkuZm9yRWFjaChlbnRyeSA9PntcblxuICAgICAgICBPYmplY3QudmFsdWVzKCBlbnRyeVswXS50cmltKCkuc3BsaXQoJywnKSApLmZvckVhY2goc2VsZWN0b3I9PntcblxuICAgICAgICAgICAgc2VsZWN0b3JzWyBzZWxlY3RvcnMubGVuZ3RoIF0gPSBzZWxlY3RvclxuXG4gICAgICAgICAgICBjb25zdCBydzogc3RyaW5nW10gPSBbXVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBlbnRyeVsxXS5yZXZlcnNlKCkubWFwKHZhbHVlPT57XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgT2JqZWN0LmVudHJpZXModmFsdWUpLm1hcCgkPT57XG5cbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LnZhbHVlcygkWzBdLnRyaW0oKS5zcGxpdCgnLCcpKS5tYXAocHJvcD0+e1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBPSUFwcGVhcmFuY2VQcm9wKChgJHsgcHJvcCB9YCkucmVwbGFjZShtYWpSZXgsICctJCYnKS50b0xvd2VyQ2FzZSgpKS5mb3JFYWNoKHA9PntcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ3WyBydy5sZW5ndGggXSA9IGAkeyBwIH06JHsgT0lBcHBlYXJhbmNlVmFsdWUoJFsxXXx8JycpIH1gXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHJvd3NbIHJvd3MubGVuZ3RoIF0gPSBydy5qb2luKCc7JylcblxuICAgICAgICB9KVxuXG4gICAgfSlcbiAgICBcbiAgICByZXR1cm4ge3NlbGVjdG9ycywgcm93c31cbiAgICBcbn1cbiJdfQ==