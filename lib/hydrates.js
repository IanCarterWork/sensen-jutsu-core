import { CompilateErrorException, RenderEngine } from "./compilate";
import { StabilizeEchoExpression, StabilizeSnapCodeExpression } from "./expression";
import { decodeHTMLEntities, StabilizeContent } from "./utilities";
export class ComponentHydratesStore {
    constructor() {
        this.entries = {};
    }
    /**
     * Add
     */
    push(name, record) {
        this.entries[name] = this.entries[name] || [];
        this.entries[name][this.entries[name].length] = record;
        return this;
    }
    /**
     * Add
     */
    update(name, key, record) {
        if (this.entries[name]) {
            if (this.entries[name][key]) {
                this.entries[name][key] = record;
            }
        }
        return this;
    }
    /**
     * Remove entry's slot by Property or State name
     */
    remove(name, key) {
        if (this.entries[name]) {
            this.entries[name] = this.entries[name].filter((record, index) => {
                return index != key;
            });
        }
        return this;
    }
    /**
     * Clean entry by Property or State name
     */
    clean(name) {
        this.entries[name] = [];
        return this;
    }
    /**
     * Clean entry by Property or State name
     */
    reset() {
        this.entries = {};
        return this;
    }
    /**
     * Find by Property or State name
     */
    retrieve(name) {
        return this.entries[name] || undefined;
    }
    /**
     * Find All
     */
    retrieves() {
        return this.entries;
    }
}
export class ComponentHydrates {
    constructor(component, state, props) {
        // entries: TComponentHydratesEntries<S, P> = {} as  TComponentHydratesEntries<S, P>
        // store: TComponentHydratesStore<S, P> = {
        //     state: {} as S,
        //     props: {} as P,
        // } as TComponentHydratesStore<S, P>
        this.component = {};
        this.state = {};
        this.props = {};
        this.$state = {};
        this.$props = {};
        this.component = component;
        this.state = Object.assign({}, state || component.state);
        this.props = props || component.props;
        this.$state = new ComponentHydratesStore();
        this.$props = new ComponentHydratesStore();
        this.proxies();
    }
    setObjectProxy(slot, input) {
        const self = this.component;
        self.state[slot] = new Proxy(input, {
            get: function (target, prop) {
                return target[prop];
            },
            set: function (target, prop, value, prox) {
                target[prop] = value;
                self.hydratesState(slot);
                return true;
            }
        });
        return this;
    }
    setDataProxy(slot) {
        const $ = this;
        const self = this.component;
        Object.defineProperty(self.state, slot, {
            get() { return $.state[slot]; },
            set(value) {
                $.state[slot] = value;
                self.hydratesState(slot);
                return true;
            },
        });
        return this;
    }
    /**
     * Build State Proxies
     * @description Use this to activate the dynamic state. For default the construct call this
     */
    proxies() {
        if (typeof this.state == 'object') {
            const self = this.component;
            const $ = this;
            Object.entries({ ...this.state }).map(e => {
                if (typeof e[1] == 'function') {
                    return;
                }
                const name = e[0];
                /**
                 * Array Proxy
                 */
                if (Array.isArray(e[1])) {
                    this.setObjectProxy(name, [...e[1]]);
                }
                /**
                 * Object Proxy
                 */
                else if (typeof e[1] == 'object') {
                    this.setObjectProxy(name, { ...e[1] });
                }
                /**
                 * Normal Data Proxy
                 */
                else {
                    this.setDataProxy(name);
                }
            });
        }
        return this;
    }
    /**
     * Hydrate Specific Node
     * @description Use this to ReRender state and props in Node
     */
    hydratesNode(node) {
        return new Promise((resolve, reject) => {
            /**
             * Init
             */
            let mockup = StabilizeContent((('innerHTML' in node) ? node.innerHTML : node.textContent) || '');
            /**
             * Echo
             */
            const echoMockup = StabilizeEchoExpression(mockup, true) || '';
            /**
             * SnapCode
             */
            const snapMockup = StabilizeSnapCodeExpression(echoMockup || mockup, true) || '';
            /**
             * Verifications
             */
            if (!echoMockup.length && !snapMockup.length) {
                resolve(null);
                return;
            }
            // console.warn('Compilate SnapCode Exp', snapMockup || echoMockup || mockup)
            /**
             * Rendering
             */
            RenderEngine(snapMockup || echoMockup || mockup, this.component, this.component.state).then(result => {
                if ('innerHTML' in node) {
                    node.innerHTML = result;
                }
                else if ('textContent' in node) {
                    node.textContent = result;
                }
                resolve(result);
            }).catch(er => {
                // CompilateErrorException(er)
                reject(er);
            });
        });
    }
    /**
     * Hydrate Specific Recorde
     * @description Use this to ReRender state and props of Record
     */
    hydratesRecord(record) {
        return new Promise((resolve, reject) => {
            const node = record.node;
            /**
             * Init
             */
            let mockup = StabilizeContent(((record.mockup && 'innerHTML' in record.mockup) ? record.mockup.innerHTML : record.mockup?.textContent) || '');
            /**
             * Echo
             */
            const echoMockup = StabilizeEchoExpression(mockup, true) || '';
            /**
             * SnapCode
             */
            const snapMockup = StabilizeSnapCodeExpression(echoMockup || mockup, true) || '';
            /**
             * Verifications
             */
            if (!echoMockup.length && !snapMockup.length) {
                resolve(null);
                return;
            }
            // console.warn('Compilate SnapCode Exp 2', snapMockup || echoMockup || mockup)
            /**
             * Rendering
             */
            RenderEngine(snapMockup || echoMockup || mockup, this.component, this.component.state).then(result => {
                if ('innerHTML' in node) {
                    node.innerHTML = result;
                }
                else if ('textContent' in node) {
                    result = decodeHTMLEntities(result);
                    node.textContent = `${result}`;
                }
                resolve(result);
            }).catch(er => {
                CompilateErrorException(er);
                reject(er);
            });
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHlkcmF0ZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9jb3JlL2h5ZHJhdGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDcEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLDJCQUEyQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXBGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUtuRSxNQUFNLE9BQU8sc0JBQXNCO0lBQW5DO1FBR0ksWUFBTyxHQUErQixFQUFpQyxDQUFBO0lBK0czRSxDQUFDO0lBM0dHOztPQUVHO0lBQ0YsSUFBSSxDQUFDLElBQWEsRUFBRSxNQUF3QjtRQUV6QyxJQUFJLENBQUMsT0FBTyxDQUFFLElBQUksQ0FBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUUsSUFBSSxDQUFFLElBQUksRUFBRSxDQUFBO1FBRWpELElBQUksQ0FBQyxPQUFPLENBQUUsSUFBSSxDQUFFLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBRSxJQUFJLENBQUUsQ0FBQyxNQUFNLENBQUUsR0FBRyxNQUFNLENBQUE7UUFFNUQsT0FBTyxJQUFJLENBQUM7SUFFaEIsQ0FBQztJQUlEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLElBQWEsRUFBRSxHQUFZLEVBQUUsTUFBd0I7UUFFeEQsSUFBRyxJQUFJLENBQUMsT0FBTyxDQUFFLElBQUksQ0FBRSxFQUFDO1lBRXBCLElBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBRSxJQUFJLENBQUUsQ0FBRSxHQUFHLENBQUUsRUFBQztnQkFFM0IsSUFBSSxDQUFDLE9BQU8sQ0FBRSxJQUFJLENBQUUsQ0FBRSxHQUFHLENBQUUsR0FBRyxNQUFNLENBQUE7YUFFdkM7U0FFSjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBRWhCLENBQUM7SUFJRDs7T0FFRztJQUNILE1BQU0sQ0FBQyxJQUFhLEVB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RUc7WUFDSCxZQUFZLENBQUMsVUFBVSxJQUFJLFVBQVUsSUFBSSxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUEsRUFBRTtnQkFFaEcsSUFBRyxXQUFXLElBQUksSUFBSSxFQUFDO29CQUVuQixJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQTtpQkFFMUI7cUJBRUksSUFBRyxhQUFhLElBQUksSUFBSSxFQUFDO29CQUUxQixNQUFNLEdBQUcsa0JBQWtCLENBQUUsTUFBTSxDQUFFLENBQUE7b0JBRXJDLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBSSxNQUFPLEVBQUUsQ0FBQTtpQkFFbkM7Z0JBRUQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1lBRW5CLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUEsRUFBRTtnQkFFVCx1QkFBdUIsQ0FBQyxFQUFFLENBQUMsQ0FBQTtnQkFFM0IsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBRWQsQ0FBQyxDQUFDLENBQUE7UUFHTixDQUFDLENBQUMsQ0FBQTtJQUdOLENBQUM7Q0FNSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudENvbnRyb2xsZXIgfSBmcm9tIFwiLlwiO1xuaW1wb3J0IHsgQ29tcGlsYXRlRXJyb3JFeGNlcHRpb24sIFJlbmRlckVuZ2luZSB9IGZyb20gXCIuL2NvbXBpbGF0ZVwiO1xuaW1wb3J0IHsgU3RhYmlsaXplRWNob0V4cHJlc3Npb24sIFN0YWJpbGl6ZVNuYXBDb2RlRXhwcmVzc2lvbiB9IGZyb20gXCIuL2V4cHJlc3Npb25cIjtcbmltcG9ydCB7IENvbXBvbmVudE1ldGhvZFJhdywgQ29tcG9uZW50UHJvcHMsIENvbXBvbmVudFN0YXRlLCBFeHByZXNzaW9uUmVjb3JkLCBUQ29tcG9uZW50SHlkcmF0ZXNFbnRyeSB9IGZyb20gXCIuL2luZGV4LnRcIjtcbmltcG9ydCB7IGRlY29kZUhUTUxFbnRpdGllcywgU3RhYmlsaXplQ29udGVudCB9IGZyb20gXCIuL3V0aWxpdGllc1wiO1xuXG5cblxuXG5leHBvcnQgY2xhc3MgQ29tcG9uZW50SHlkcmF0ZXNTdG9yZTxUIGV4dGVuZHMgKENvbXBvbmVudFN0YXRlIHwgQ29tcG9uZW50UHJvcHMpPntcblxuXG4gICAgZW50cmllczogVENvbXBvbmVudEh5ZHJhdGVzRW50cnk8VD4gPSB7fSBhcyAgVENvbXBvbmVudEh5ZHJhdGVzRW50cnk8VD5cblxuXG5cbiAgICAvKipcbiAgICAgKiBBZGRcbiAgICAgKi9cbiAgICAgcHVzaChuYW1lOiBrZXlvZiBULCByZWNvcmQ6IEV4cHJlc3Npb25SZWNvcmQpe1xuXG4gICAgICAgIHRoaXMuZW50cmllc1sgbmFtZSBdID0gdGhpcy5lbnRyaWVzWyBuYW1lIF0gfHwgW11cblxuICAgICAgICB0aGlzLmVudHJpZXNbIG5hbWUgXVsgdGhpcy5lbnRyaWVzWyBuYW1lIF0ubGVuZ3RoIF0gPSByZWNvcmRcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgXG4gICAgfVxuXG5cblxuICAgIC8qKlxuICAgICAqIEFkZFxuICAgICAqL1xuICAgIHVwZGF0ZShuYW1lOiBrZXlvZiBULCBrZXkgOiBudW1iZXIsIHJlY29yZDogRXhwcmVzc2lvblJlY29yZCl7XG5cbiAgICAgICAgaWYodGhpcy5lbnRyaWVzWyBuYW1lIF0pe1xuXG4gICAgICAgICAgICBpZih0aGlzLmVudHJpZXNbIG5hbWUgXVsga2V5IF0pe1xuICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuZW50cmllc1sgbmFtZSBdWyBrZXkgXSA9IHJlY29yZFxuICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgXG4gICAgfVxuXG5cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBlbnRyeSdzIHNsb3QgYnkgUHJvcGVydHkgb3IgU3RhdGUgbmFtZVxuICAgICAqL1xuICAgIHJlbW92ZShuYW1lOiBrZXlvZiBULCBrZXk6IG51bWJlcil7XG5cbiAgICAgICAgaWYodGhpcy5lbnRyaWVzWyBuYW1lIF0pe1xuXG4gICAgICAgICAgICB0aGlzLmVudHJpZXNbIG5hbWUgXSA9IHRoaXMuZW50cmllc1sgbmFtZSBdLmZpbHRlcigocmVjb3JkLCBpbmRleCk9PntcblxuICAgICAgICAgICAgICAgIHJldHVybiBpbmRleCAhPSBrZXlcblxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIFxuICAgIH1cblxuXG5cbiAgICAvKipcbiAgICAgKiBDbGVhbiBlbnRyeSBieSBQcm9wZXJ0eSBvciBTdGF0ZSBuYW1lXG4gICAgICovXG4gICAgY2xlYW4obmFtZToga2V5b2YgVCl7XG5cbiAgICAgICAgdGhpcy5lbnRyaWVzWyBuYW1lIF0gPSBbXVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBcbiAgICB9XG5cblxuXG4gICAgLyoqXG4gICAgICogQ2xlYW4gZW50cnkgYnkgUHJvcGVydHkgb3IgU3RhdGUgbmFtZVxuICAgICAqL1xuICAgIHJlc2V0KCl7XG5cbiAgICAgICAgdGhpcy5lbnRyaWVzID0ge30gYXMgVENvbXBvbmVudEh5ZHJhdGVzRW50cnk8VD5cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgXG4gICAgfVxuXG5cblxuICAgIC8qKlxuICAgICAqIEZpbmQgYnkgUHJvcGVydHkgb3IgU3RhdGUgbmFtZVxuICAgICAqL1xuICAgIHJldHJpZXZlKG5hbWU6IGtleW9mIFQpIDogRXhwcmVzc2lvblJlY29yZFtde1xuXG4gICAgICAgIHJldHVybiB0aGlzLmVudHJpZXNbIG5hbWUgXSB8fCB1bmRlZmluZWRcbiAgICAgICAgXG4gICAgfVxuXG5cblxuXG4gICAgLyoqXG4gICAgICogRmluZCBBbGxcbiAgICAgKi9cbiAgICByZXRyaWV2ZXMoKXtcblxuICAgICAgICByZXR1cm4gdGhpcy5lbnRyaWVzXG4gICAgICAgIFxuICAgIH1cblxuXG5cbiAgICBcbn1cblxuXG5cblxuXG5leHBvcnQgY2xhc3MgQ29tcG9uZW50SHlkcmF0ZXM8XG5cbiAgICBTIGV4dGVuZHMgQ29tcG9uZW50U3RhdGUsIFxuICAgIFxuICAgIFAgZXh0ZW5kcyBDb21wb25lbnRQcm9wcyxcbiAgICBcbiAgICBNIGV4dGVuZHMgQ29tcG9uZW50TWV0aG9kUmF3PFMsIFA+XG4gICAgXG4+e1xuXG5cbiAgICAvLyBlbnRyaWVzOiBUQ29tcG9uZW50SHlkcmF0ZXNFbnRyaWVzPFMsIFA+ID0ge30gYXMgIFRDb21wb25lbnRIeWRyYXRlc0VudHJpZXM8UywgUD5cblxuICAgIC8vIHN0b3JlOiBUQ29tcG9uZW50SHlkcmF0ZXNTdG9yZTxTLCBQPiA9IHtcblxuICAgIC8vICAgICBzdGF0ZToge30gYXMgUyxcbiAgICAgICAgXG4gICAgLy8gICAgIHByb3BzOiB7fSBhcyBQLFxuXG4gICAgLy8gfSBhcyBUQ29tcG9uZW50SHlkcmF0ZXNTdG9yZTxTLCBQPlxuICAgIFxuXG4gICAgY29tcG9uZW50OiBDb21wb25lbnRDb250cm9sbGVyPFMsIFAsIE0+ID0ge30gYXMgQ29tcG9uZW50Q29udHJvbGxlcjxTLCBQLCBNPlxuXG4gICAgc3RhdGU6IFMgPSB7fSBhcyBTXG5cbiAgICBwcm9wczogUCA9IHt9IGFzIFBcblxuXG5cbiAgICAkc3RhdGU6IENvbXBvbmVudEh5ZHJhdGVzU3RvcmU8Uz4gPSB7fSBhcyBDb21wb25lbnRIeWRyYXRlc1N0b3JlPFM+XG5cbiAgICAkcHJvcHM6IENvbXBvbmVudEh5ZHJhdGVzU3RvcmU8UD4gPSB7fSBhcyBDb21wb25lbnRIeWRyYXRlc1N0b3JlPFA+XG5cblxuICAgIFxuICAgIGNvbnN0cnVjdG9yKGNvbXBvbmVudDogQ29tcG9uZW50Q29udHJvbGxlcjxTLCBQLCBNPiwgc3RhdGU/OiBTLCBwcm9wcz86IFApe1xuXG4gICAgICAgIFxuICAgICAgICB0aGlzLmNvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSB8fCBjb21wb25lbnQuc3RhdGUpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzIHx8IGNvbXBvbmVudC5wcm9wcztcbiAgICAgICAgXG4gICAgICAgIHRoaXMuJHN0YXRlID0gbmV3IENvbXBvbmVudEh5ZHJhdGVzU3RvcmUoKTtcblxuICAgICAgICB0aGlzLiRwcm9wcyA9IG5ldyBDb21wb25lbnRIeWRyYXRlc1N0b3JlKCk7XG5cblxuICAgICAgICB0aGlzLnByb3hpZXMoKVxuXG4gICAgfVxuXG5cblxuXG5cbiAgICBzZXRPYmplY3RQcm94eShzbG90OiBrZXlvZiBTLCBpbnB1dDogU1trZXlvZiBTXSl7XG5cbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXMuY29tcG9uZW50O1xuXG4gICAgICAgIHNlbGYuc3RhdGVbIHNsb3QgXSA9IG5ldyBQcm94eTxTW2tleW9mIFNdPihpbnB1dCwge1xuXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKHRhcmdldCwgcHJvcCl7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odGFyZ2V0LCBwcm9wLCB2YWx1ZSwgcHJveCl7XG5cbiAgICAgICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZVxuXG4gICAgICAgICAgICAgICAgc2VsZi5oeWRyYXRlc1N0YXRlKHNsb3QpXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBcbiAgICB9XG5cblxuXG5cblxuXG5cblxuXG4gICAgc2V0RGF0YVByb3h5KHNsb3Q6IGtleW9mIFMpe1xuXG4gICAgICAgIGNvbnN0ICQgPSB0aGlzO1xuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzLmNvbXBvbmVudDtcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZi5zdGF0ZSwgc2xvdCwge1xuXG4gICAgICAgICAgICBnZXQoKXsgcmV0dXJuICQuc3RhdGVbIHNsb3QgXTsgfSxcblxuICAgICAgICAgICAgc2V0KHZhbHVlKXtcblxuICAgICAgICAgICAgICAgICQuc3RhdGVbIHNsb3QgXSA9IHZhbHVlXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgc2VsZi5oeWRyYXRlc1N0YXRlKHNsb3QpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgfSlcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgXG4gICAgfVxuXG5cblxuXG5cbiAgICBcbiAgICBcbiAgICBcbiAgICBcblxuXG4gICAgLyoqXG4gICAgICogQnVpbGQgU3RhdGUgUHJveGllc1xuICAgICAqIEBkZXNjcmlwdGlvbiBVc2UgdGhpcyB0byBhY3RpdmF0ZSB0aGUgZHluYW1pYyBzdGF0ZS4gRm9yIGRlZmF1bHQgdGhlIGNvbnN0cnVjdCBjYWxsIHRoaXNcbiAgICAgKi9cbiAgICBwcm94aWVzKCl7XG5cbiAgICAgICAgaWYodHlwZW9mIHRoaXMuc3RhdGUgPT0gJ29iamVjdCcpe1xuXG4gICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcy5jb21wb25lbnQ7XG5cbiAgICAgICAgICAgIGNvbnN0ICQgPSB0aGlzO1xuXG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyh7Li4udGhpcy5zdGF0ZX0pLm1hcChlPT57XG5cbiAgICAgICAgICAgICAgICBpZih0eXBlb2YgZVsxXSA9PSAnZnVuY3Rpb24nKXsgcmV0dXJuIDsgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGVbMF0gYXMga2V5b2YgU1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogQXJyYXkgUHJveHlcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZihBcnJheS5pc0FycmF5KGVbMV0pKXtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldE9iamVjdFByb3h5KG5hbWUsIFsuLi5lWzFdXSBhcyBTW3R5cGVvZiBuYW1lXSApXG5cbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIE9iamVjdCBQcm94eVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGVsc2UgaWYodHlwZW9mIGVbMV0gPT0gJ29iamVjdCcpe1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0T2JqZWN0UHJveHkobmFtZSwgey4uLmVbMV19IGFzIFNbdHlwZW9mIG5hbWVdIClcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogTm9ybWFsIERhdGEgUHJveHlcbiAgICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICAgIGVsc2V7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXREYXRhUHJveHkobmFtZSlcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIFxuICAgIH1cblxuXG5cblxuICAgIC8qKlxuICAgICAqIEh5ZHJhdGUgU3BlY2lmaWMgTm9kZVxuICAgICAqIEBkZXNjcmlwdGlvbiBVc2UgdGhpcyB0byBSZVJlbmRlciBzdGF0ZSBhbmQgcHJvcHMgaW4gTm9kZVxuICAgICAqL1xuICAgIGh5ZHJhdGVzTm9kZShub2RlOiBOb2RlIHwgSFRNTEVsZW1lbnQpe1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmcgfCBudWxsPigocmVzb2x2ZSwgcmVqZWN0KT0+e1xuXG5cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJbml0XG4gICAgICAgICAgICAgKi9cbiAgICBcbiAgICAgICAgICAgIGxldCBtb2NrdXAgPSBTdGFiaWxpemVDb250ZW50KCgoJ2lubmVySFRNTCcgaW4gbm9kZSkgPyBub2RlLmlubmVySFRNTCA6IG5vZGUudGV4dENvbnRlbnQpIHx8ICcnKSBhcyBzdHJpbmc7XG4gICAgICAgICAgICBcbiAgICBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRWNob1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCBlY2hvTW9ja3VwID0gU3RhYmlsaXplRWNob0V4cHJlc3Npb24obW9ja3VwLCB0cnVlKSB8fCAnJ1xuICAgICBcblxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNuYXBDb2RlXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgY29uc3Qgc25hcE1vY2t1cCA9IFN0YWJpbGl6ZVNuYXBDb2RlRXhwcmVzc2lvbihlY2hvTW9ja3VwIHx8IG1vY2t1cCwgdHJ1ZSkgfHwgJydcblxuXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVmVyaWZpY2F0aW9uc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZighZWNob01vY2t1cC5sZW5ndGggJiYgIXNuYXBNb2NrdXAubGVuZ3RoKXsgXG5cbiAgICAgICAgICAgICAgICByZXNvbHZlKG51bGwpOyByZXR1cm47IFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICBcblxuICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKCdDb21waWxhdGUgU25hcENvZGUgRXhwJywgc25hcE1vY2t1cCB8fCBlY2hvTW9ja3VwIHx8IG1vY2t1cClcbiAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlbmRlcmluZ1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBSZW5kZXJFbmdpbmUoc25hcE1vY2t1cCB8fCBlY2hvTW9ja3VwIHx8IG1vY2t1cCwgdGhpcy5jb21wb25lbnQsIHRoaXMuY29tcG9uZW50LnN0YXRlKS50aGVuKHJlc3VsdD0+e1xuICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYoJ2lubmVySFRNTCcgaW4gbm9kZSl7IG5vZGUuaW5uZXJIVE1MID0gcmVzdWx0IH1cblxuICAgICAgICAgICAgICAgIGVsc2UgaWYoJ3RleHRDb250ZW50JyBpbiBub2RlKXsgbm9kZS50ZXh0Q29udGVudCA9IHJlc3VsdCB9XG5cbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdClcbiAgICAgXG4gICAgICAgICAgICB9KS5jYXRjaChlcj0+e1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIENvbXBpbGF0ZUVycm9yRXhjZXB0aW9uKGVyKVxuICAgIFxuICAgICAgICAgICAgICAgIHJlamVjdChlcilcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pXG5cblxuICAgICAgICB9KVxuICAgIFxuXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuXG5cblxuXG4gICAgLyoqXG4gICAgICogSHlkcmF0ZSBTcGVjaWZpYyBSZWNvcmRlXG4gICAgICogQGRlc2NyaXB0aW9uIFVzZSB0aGlzIHRvIFJlUmVuZGVyIHN0YXRlIGFuZCBwcm9wcyBvZiBSZWNvcmRcbiAgICAgKi9cbiAgICBoeWRyYXRlc1JlY29yZChyZWNvcmQ6IEV4cHJlc3Npb25SZWNvcmQpe1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmcgfCBudWxsPigocmVzb2x2ZSwgcmVqZWN0KT0+e1xuXG4gICAgICAgICAgICBjb25zdCBub2RlID0gcmVjb3JkLm5vZGU7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSW5pdFxuICAgICAgICAgICAgICovXG4gICAgXG4gICAgICAgICAgICBsZXQgbW9ja3VwID0gU3RhYmlsaXplQ29udGVudCgoKHJlY29yZC5tb2NrdXAgJiYgJ2lubmVySFRNTCcgaW4gcmVjb3JkLm1vY2t1cCkgPyByZWNvcmQubW9ja3VwLmlubmVySFRNTCA6IHJlY29yZC5tb2NrdXA/LnRleHRDb250ZW50KSB8fCAnJykgYXMgc3RyaW5nO1xuICAgICAgICAgICAgXG4gICAgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVjaG9cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgZWNob01vY2t1cCA9IFN0YWJpbGl6ZUVjaG9FeHByZXNzaW9uKG1vY2t1cCwgdHJ1ZSkgfHwgJydcbiAgICAgXG5cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTbmFwQ29kZVxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgIGNvbnN0IHNuYXBNb2NrdXAgPSBTdGFiaWxpemVTbmFwQ29kZUV4cHJlc3Npb24oZWNob01vY2t1cCB8fCBtb2NrdXAsIHRydWUpIHx8ICcnXG5cblxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFZlcmlmaWNhdGlvbnNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYoIWVjaG9Nb2NrdXAubGVuZ3RoICYmICFzbmFwTW9ja3VwLmxlbmd0aCl7IFxuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShudWxsKTsgcmV0dXJuOyBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgXG5cblxuXG4gICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oJ0NvbXBpbGF0ZSBTbmFwQ29kZSBFeHAgMicsIHNuYXBNb2NrdXAgfHwgZWNob01vY2t1cCB8fCBtb2NrdXApXG4gICAgICAgICAgICBcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZW5kZXJpbmdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgUmVuZGVyRW5naW5lKHNuYXBNb2NrdXAgfHwgZWNob01vY2t1cCB8fCBtb2NrdXAsIHRoaXMuY29tcG9uZW50LCB0aGlzLmNvbXBvbmVudC5zdGF0ZSkudGhlbihyZXN1bHQ9PntcblxuICAgICAgICAgICAgICAgIGlmKCdpbm5lckhUTUwnIGluIG5vZGUpeyBcblxuICAgICAgICAgICAgICAgICAgICBub2RlLmlubmVySFRNTCA9IHJlc3VsdCBcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGVsc2UgaWYoJ3RleHRDb250ZW50JyBpbiBub2RlKXsgXG5cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZGVjb2RlSFRNTEVudGl0aWVzKCByZXN1bHQgKVxuXG4gICAgICAgICAgICAgICAgICAgIG5vZGUudGV4dENvbnRlbnQgPSBgJHsgcmVzdWx0IH1gIFxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpXG4gICAgIFxuICAgICAgICAgICAgfSkuY2F0Y2goZXI9PntcbiAgICBcbiAgICAgICAgICAgICAgICBDb21waWxhdGVFcnJvckV4Y2VwdGlvbihlcilcbiAgICBcbiAgICAgICAgICAgICAgICByZWplY3QoZXIpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KVxuXG5cbiAgICAgICAgfSlcbiAgICBcblxuICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbn0iXX0=