export class SensenMetricRandom {
    static CreateRandom(min, max) {
        return Math.floor(Math.random() * (max - min) + min);
    }
    static CreateBlock(base, length) {
        let based, out = [];
        if (typeof base == 'string') {
            based = base.split(' ');
        }
        if (Array.isArray(based)) {
            for (let x = 0; x < length; x++) {
                const k = this.CreateRandom(0, based.length - 1);
                out[out.length] = based[k];
            }
        }
        return out;
    }
    static CreateAplpha(length) {
        return this.CreateBlock(`${this.ALPHA_LOWER} ${this.ALPHA_UPPER}`, length);
    }
    static CreateNumeric(length) {
        return this.CreateBlock(`${this.NUMERIC}`, length);
    }
    static Create(length) {
        return this.CreateBlock(`${this.ALPHA_NUMERIC}`, length);
    }
}
SensenMetricRandom.ALPHA_NUMERIC = 'a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 0 1 2 3 4 5 6 7 8 9';
SensenMetricRandom.ALPHA_NUMERIC_LOWER = 'a b c d e f g h i j k l m n o p q r s t u v w x y z 0 1 2 3 4 5 6 7 8 9';
SensenMetricRandom.ALPHA_NUMERIC_UPPER = 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 0 1 2 3 4 5 6 7 8 9';
SensenMetricRandom.ALPHA_UPPER = 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z';
SensenMetricRandom.ALPHA_LOWER = 'a b c d e f g h i j k l m n o p q r s t u v w x y z';
SensenMetricRandom.NUMERIC = '0 1 2 3 4 5 6 7 8 9';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0cmljLXJhbmRvbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2NvcmUvbWV0cmljLXJhbmRvbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxNQUFNLE9BQU8sa0JBQWtCO0lBZ0IzQixNQUFNLENBQUMsWUFBWSxDQUFDLEdBQVcsRUFBRSxHQUFXO1FBRXhDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFFekQsQ0FBQztJQUtELE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBWSxFQUFFLE1BQWM7UUFFM0MsSUFBSSxLQUFLLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUdwQixJQUFHLE9BQU8sSUFBSSxJQUFJLFFBQVEsRUFBQztZQUV2QixLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtTQUUxQjtRQUdELElBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBQztZQUVwQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUU3QixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUVqRCxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBRSxDQUFDLENBQUUsQ0FBQzthQUVoQztTQUVKO1FBRUQsT0FBTyxHQUFHLENBQUM7SUFFZixDQUFDO0lBS0QsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFjO1FBRTlCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FFbkIsR0FBSSxJQUFJLENBQUMsV0FBWSxJQUFLLElBQUksQ0FBQyxXQUFZLEVBQUUsRUFFN0MsTUFBTSxDQUVULENBQUE7SUFFTCxDQUFDO0lBS0QsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFjO1FBRS9CLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FFbkIsR0FBSSxJQUFJLENBQUMsT0FBUSxFQUFFLEVBRW5CLE1BQU0sQ0FFVCxDQUFBO0lBRUwsQ0FBQztJQUtELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBYztRQUV4QixPQUFPLElBQUksQ0FBQyxXQUFXLENBRW5CLEdBQUksSUFBSSxDQUFDLGFBQWMsRUFBRSxFQUV6QixNQUFNLENBRVQsQ0FBQTtJQUVMLENBQUM7O0FBOUZNLGdDQUFhLEdBQW9CLDZIQUE2SCxDQUFDO0FBRS9KLHNDQUFtQixHQUFxQix5RUFBeUUsQ0FBQztBQUVsSCxzQ0FBbUIsR0FBcUIseUVBQXlFLENBQUM7QUFFbEgsOEJBQVcsR0FBa0IscURBQXFELENBQUM7QUFFbkYsOEJBQVcsR0FBa0IscURBQXFELENBQUM7QUFFbkYsMEJBQU8sR0FBZSxxQkFBcUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1ldHJpY1RBbHBoYUwsIE1ldHJpY1RBbHBoYU51bSwgTWV0cmljVEFscGhhTnVtTCwgTWV0cmljVEFscGhhTnVtVSwgTWV0cmljVEFscGhhVSwgTWV0cmljVE51bSB9IGZyb20gXCIuXCI7XG5cblxuXG5cbmV4cG9ydCBjbGFzcyBTZW5zZW5NZXRyaWNSYW5kb217XG5cbiAgICBzdGF0aWMgQUxQSEFfTlVNRVJJQzogTWV0cmljVEFscGhhTnVtID0gJ2EgYiBjIGQgZSBmIGcgaCBpIGogayBsIG0gbiBvIHAgcSByIHMgdCB1IHYgdyB4IHkgeiBBIEIgQyBEIEUgRiBHIEggSSBKIEsgTCBNIE4gTyBQIFEgUiBTIFQgVSBWIFcgWCBZIFogMCAxIDIgMyA0IDUgNiA3IDggOSc7XG5cbiAgICBzdGF0aWMgQUxQSEFfTlVNRVJJQ19MT1dFUjogTWV0cmljVEFscGhhTnVtTCA9ICdhIGIgYyBkIGUgZiBnIGggaSBqIGsgbCBtIG4gbyBwIHEgciBzIHQgdSB2IHcgeCB5IHogMCAxIDIgMyA0IDUgNiA3IDggOSc7XG5cbiAgICBzdGF0aWMgQUxQSEFfTlVNRVJJQ19VUFBFUjogTWV0cmljVEFscGhhTnVtVSA9ICdBIEIgQyBEIEUgRiBHIEggSSBKIEsgTCBNIE4gTyBQIFEgUiBTIFQgVSBWIFcgWCBZIFogMCAxIDIgMyA0IDUgNiA3IDggOSc7XG5cbiAgICBzdGF0aWMgQUxQSEFfVVBQRVI6IE1ldHJpY1RBbHBoYVUgPSAnQSBCIEMgRCBFIEYgRyBIIEkgSiBLIEwgTSBOIE8gUCBRIFIgUyBUIFUgViBXIFggWSBaJztcblxuICAgIHN0YXRpYyBBTFBIQV9MT1dFUjogTWV0cmljVEFscGhhTCA9ICdhIGIgYyBkIGUgZiBnIGggaSBqIGsgbCBtIG4gbyBwIHEgciBzIHQgdSB2IHcgeCB5IHonO1xuXG4gICAgc3RhdGljIE5VTUVSSUM6IE1ldHJpY1ROdW0gPSAnMCAxIDIgMyA0IDUgNiA3IDggOSc7XG4gICAgXG5cblxuICAgIHN0YXRpYyBDcmVhdGVSYW5kb20obWluOiBudW1iZXIsIG1heDogbnVtYmVyKXtcblxuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW4pO1xuXG4gICAgfVxuICAgIFxuICAgIFxuXG5cbiAgICBzdGF0aWMgQ3JlYXRlQmxvY2soYmFzZTogc3RyaW5nLCBsZW5ndGg6IG51bWJlcil7XG5cbiAgICAgICAgbGV0IGJhc2VkLCBvdXQgPSBbXTtcblxuXG4gICAgICAgIGlmKHR5cGVvZiBiYXNlID09ICdzdHJpbmcnKXtcblxuICAgICAgICAgICAgYmFzZWQgPSBiYXNlLnNwbGl0KCcgJylcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuXG4gICAgICAgIGlmKEFycmF5LmlzQXJyYXkoYmFzZWQpKXtcblxuICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCBsZW5ndGg7IHgrKykge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgayA9IHRoaXMuQ3JlYXRlUmFuZG9tKDAsIGJhc2VkLmxlbmd0aCAtIDEpO1xuXG4gICAgICAgICAgICAgICAgb3V0W291dC5sZW5ndGhdID0gYmFzZWRbIGsgXTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICBcbiAgICB9XG5cblxuXG5cbiAgICBzdGF0aWMgQ3JlYXRlQXBscGhhKGxlbmd0aDogbnVtYmVyKXtcblxuICAgICAgICByZXR1cm4gdGhpcy5DcmVhdGVCbG9jayhcblxuICAgICAgICAgICAgYCR7IHRoaXMuQUxQSEFfTE9XRVIgfSAkeyB0aGlzLkFMUEhBX1VQUEVSIH1gLFxuXG4gICAgICAgICAgICBsZW5ndGhcbiAgICAgICAgICAgIFxuICAgICAgICApXG5cbiAgICB9XG5cblxuXG5cbiAgICBzdGF0aWMgQ3JlYXRlTnVtZXJpYyhsZW5ndGg6IG51bWJlcil7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuQ3JlYXRlQmxvY2soXG5cbiAgICAgICAgICAgIGAkeyB0aGlzLk5VTUVSSUMgfWAsXG5cbiAgICAgICAgICAgIGxlbmd0aFxuXG4gICAgICAgIClcblxuICAgIH1cblxuXG5cblxuICAgIHN0YXRpYyBDcmVhdGUobGVuZ3RoOiBudW1iZXIpe1xuXG4gICAgICAgIHJldHVybiB0aGlzLkNyZWF0ZUJsb2NrKFxuXG4gICAgICAgICAgICBgJHsgdGhpcy5BTFBIQV9OVU1FUklDIH1gLFxuXG4gICAgICAgICAgICBsZW5ndGhcblxuICAgICAgICApXG5cbiAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG59Il19