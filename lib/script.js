import { SockRenderEngine } from "./compilate";
import { StabilizeEchoExpression, StabilizeSnapCodeExpression } from "./expression";
import { StabilizeContent } from "./utilities";
/**
 * Detect and run script in element in context with variables dictionary
 */
export async function Run(element, context, dictionary) {
    const scripts = element.querySelectorAll('script');
    const promised = [];
    if (scripts.length) {
        scripts.forEach(script => {
            const type = (script.getAttribute('type') || '').toLowerCase();
            const exec = document.createElement('script');
            promised.push(new Promise((resolve, reject) => {
                if (type == 'module/sensen') {
                    exec.setAttribute('type', 'module');
                    SockRenderEngine(StabilizeSnapCodeExpression(StabilizeEchoExpression(StabilizeContent(script.textContent || '') || '', false), false), context || element, dictionary || element.props)
                        .then(compilate => {
                        exec.innerHTML = `const $this=document.querySelector('[euid="${element.$EUiD}"]');\n${compilate}`;
                        element.insertBefore(exec, element.lastChild);
                        script.parentElement?.removeChild(script);
                        resolve(element);
                    })
                        .catch(e => console.error('Sensen Script Failed', e));
                }
                else {
                    exec.setAttribute('type', `${type || 'module'}`);
                    exec.textContent = script.textContent;
                    element.insertBefore(exec, element.lastChild);
                    script.parentElement?.removeChild(script);
                    resolve(element);
                }
            }));
        });
    }
    return Promise.all(promised);
}
/**
 * Exports
 */
export class SensenScript {
}
SensenScript.Run = Run;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vY29yZS9zY3JpcHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFBO0FBQzlDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGNBQWMsQ0FBQTtBQUNuRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxhQUFhLENBQUE7QUFVOUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsS0FBSyxVQUFVLEdBQUcsQ0FBUSxPQUFpQyxFQUFFLE9BQVksRUFBRSxVQUFlO0lBRTdGLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUVsRCxNQUFNLFFBQVEsR0FBOEIsRUFBRSxDQUFBO0lBRzlDLElBQUcsT0FBTyxDQUFDLE1BQU0sRUFBQztRQUVkLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFBLEVBQUU7WUFFcEIsTUFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFFLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFBO1lBRTVELE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUE7WUFHN0MsUUFBUSxDQUFDLElBQUksQ0FFVCxJQUFJLE9BQU8sQ0FBaUIsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFDLEVBQUU7Z0JBRTNDLElBQUcsSUFBSSxJQUFJLGVBQWUsRUFBQztvQkFFdkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7b0JBRXBDLGdCQUFnQixDQUVaLDJCQUEyQixDQUV2Qix1QkFBdUIsQ0FFbkIsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFdBQVcsSUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBRWhELEtBQUssQ0FBQyxFQUVWLEtBQUssQ0FBQyxFQUVWLE9BQU8sSUFBRSxPQUFPLEVBQUUsVUFBVSxJQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUM7eUJBRTdDLElBQUksQ0FBQyxTQUFTLENBQUEsRUFBRTt3QkFFYixJQUFJLENBQUMsU0FBUyxHQUFHLDhDQUErQyxPQUFPLENBQUMsS0FBTSxVQUFVLFNBQVMsRUFBRSxDQUFBO3dCQUVuRyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7d0JBRTdDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO3dCQUUxQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUE7b0JBRXBCLENBQUMsQ0FBQzt5QkFFRCxLQUFLLENBQUMsQ0FBQyxDQUFBLEVBQUUsQ0FBQSxPQUFPLENBQUMsS0FBSyxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7aUJBRXREO3FCQUVHO29CQUVBLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLEdBQUksSUFBSSxJQUFFLFFBQVMsRUFBRSxDQUFDLENBQUM7b0JBRWpELElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQTtvQkFFckMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO29CQUU3QyxNQUFNLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFFMUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBO2lCQUVuQjtZQUVMLENBQUMsQ0FBQyxDQUVMLENBQUE7UUFFTCxDQUFDLENBQUMsQ0FBQTtLQUVMO0lBR0QsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBRWhDLENBQUM7QUFJRDs7R0FFRztBQUNILE1BQU0sT0FBTyxZQUFZOztBQUVkLGdCQUFHLEdBQUcsR0FBRyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2Vuc2VuSFRNTEVsZW1lbnQgfSBmcm9tIFwiLlwiXG5pbXBvcnQgeyBTb2NrUmVuZGVyRW5naW5lIH0gZnJvbSBcIi4vY29tcGlsYXRlXCJcbmltcG9ydCB7IFN0YWJpbGl6ZUVjaG9FeHByZXNzaW9uLCBTdGFiaWxpemVTbmFwQ29kZUV4cHJlc3Npb24gfSBmcm9tIFwiLi9leHByZXNzaW9uXCJcbmltcG9ydCB7IFN0YWJpbGl6ZUNvbnRlbnQgfSBmcm9tIFwiLi91dGlsaXRpZXNcIlxuXG5cblxuXG5cblxuXG5cblxuLyoqXG4gKiBEZXRlY3QgYW5kIHJ1biBzY3JpcHQgaW4gZWxlbWVudCBpbiBjb250ZXh0IHdpdGggdmFyaWFibGVzIGRpY3Rpb25hcnlcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFJ1bjxQcm9wcz4oZWxlbWVudDogU2Vuc2VuSFRNTEVsZW1lbnQ8UHJvcHM+LCBjb250ZXh0Pzoge30sIGRpY3Rpb25hcnk/OiB7fSl7XG5cbiAgICBjb25zdCBzY3JpcHRzID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzY3JpcHQnKVxuXG4gICAgY29uc3QgcHJvbWlzZWQ6IFByb21pc2U8dHlwZW9mIGVsZW1lbnQ+W10gPSBbXVxuICAgIFxuXG4gICAgaWYoc2NyaXB0cy5sZW5ndGgpe1xuXG4gICAgICAgIHNjcmlwdHMuZm9yRWFjaChzY3JpcHQ9PntcblxuICAgICAgICAgICAgY29uc3QgdHlwZSA9IChzY3JpcHQuZ2V0QXR0cmlidXRlKCd0eXBlJyl8fCcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGV4ZWMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKVxuXG5cbiAgICAgICAgICAgIHByb21pc2VkLnB1c2goXG5cbiAgICAgICAgICAgICAgICBuZXcgUHJvbWlzZTx0eXBlb2YgZWxlbWVudD4oKHJlc29sdmUsIHJlamVjdCk9PntcblxuICAgICAgICAgICAgICAgICAgICBpZih0eXBlID09ICdtb2R1bGUvc2Vuc2VuJyl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWMuc2V0QXR0cmlidXRlKCd0eXBlJywgJ21vZHVsZScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBTb2NrUmVuZGVyRW5naW5lKFxuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdGFiaWxpemVTbmFwQ29kZUV4cHJlc3Npb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdGFiaWxpemVFY2hvRXhwcmVzc2lvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdGFiaWxpemVDb250ZW50KHNjcmlwdC50ZXh0Q29udGVudHx8JycpIHx8ICcnXG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLCBjb250ZXh0fHxlbGVtZW50LCBkaWN0aW9uYXJ5fHxlbGVtZW50LnByb3BzKVxuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGNvbXBpbGF0ZT0+e1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjLmlubmVySFRNTCA9IGBjb25zdCAkdGhpcz1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZXVpZD1cIiR7IGVsZW1lbnQuJEVVaUQgfVwiXScpO1xcbiR7Y29tcGlsYXRlfWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50Lmluc2VydEJlZm9yZShleGVjLCBlbGVtZW50Lmxhc3RDaGlsZClcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyaXB0LnBhcmVudEVsZW1lbnQ/LnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZWxlbWVudClcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZT0+Y29uc29sZS5lcnJvcignU2Vuc2VuIFNjcmlwdCBGYWlsZWQnLCBlKSlcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhlYy5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCBgJHsgdHlwZXx8J21vZHVsZScgfWApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBleGVjLnRleHRDb250ZW50ID0gc2NyaXB0LnRleHRDb250ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuaW5zZXJ0QmVmb3JlKGV4ZWMsIGVsZW1lbnQubGFzdENoaWxkKVxuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcmlwdC5wYXJlbnRFbGVtZW50Py5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZWxlbWVudClcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICApXG5cbiAgICAgICAgfSlcbiAgICAgICAgXG4gICAgfVxuXG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZWQpXG4gICAgXG59XG5cblxuXG4vKipcbiAqIEV4cG9ydHNcbiAqL1xuZXhwb3J0IGNsYXNzIFNlbnNlblNjcmlwdHtcblxuICAgIHN0YXRpYyBSdW4gPSBSdW47XG4gICAgXG59XG5cblxuXG5cblxuXG5cblxuXG4iXX0=