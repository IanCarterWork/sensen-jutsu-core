import Sensen, { SensenHTMLElement } from "..";
/**
 * Scene Header
 */
export class SceneActivityHeader extends SensenHTMLElement {
    constructor() {
        super({});
    }
}
/**
 * Scene Body
 */
export class SceneActivityBody extends SensenHTMLElement {
    constructor() {
        super({});
    }
}
/**
 * Scene Footer
 */
export class SceneActivityMenu extends SensenHTMLElement {
    constructor() {
        super({});
    }
}
export function activityHeaderComponent() {
    return new Sensen.Component({
        name: 'activityHeader',
        template: `
    <div activity-header-goback >Go Back</div>
    <div activity-header-left ></div>
    <div activity-header-center ">{{ this.props.title }}</div>
    <div activity-header-right ></div>
        `,
        emit: {
            expressionRecorded: (record) => { },
            connected: (e) => {
                // console.warn('Component Connected', e.emit.props.title)
            }
        },
        appearance: {
            $self: [
                {
                    display: 'flex',
                    flexDirection: 'row'
                }
            ]
        },
        props: {
            title: 'default title',
            goBack: false,
        },
        state: {
            title: false,
        },
        methods: {
            goBack({ self, event }) {
            },
        }
    });
}
export function useScreenElements() {
    if (!customElements.get(`scene-header`)) {
        customElements.define(`scene-header`, SceneActivityHeader);
    }
    if (!customElements.get(`scene-body`)) {
        customElements.define(`scene-body`, SceneActivityBody);
    }
    if (!customElements.get(`scene-menu`)) {
        customElements.define(`scene-menu`, SceneActivityMenu);
    }
    return {
        component: {
            hedaer: activityHeaderComponent()
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9jb3JlL2VsZW1lbnRzL2FjdGl2aXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sTUFBTSxFQUFFLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFLL0M7O0dBRUc7QUFDSCxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsaUJBQXFCO0lBRTFEO1FBRUksS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRWQsQ0FBQztDQUVKO0FBR0Q7O0dBRUc7QUFDSCxNQUFNLE9BQU8saUJBQWtCLFNBQVEsaUJBQXFCO0lBRXhEO1FBRUksS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRWQsQ0FBQztDQUVKO0FBR0Q7O0dBRUc7QUFDSCxNQUFNLE9BQU8saUJBQWtCLFNBQVEsaUJBQXFCO0lBRXhEO1FBRUksS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRWQsQ0FBQztDQUVKO0FBdUJELE1BQU0sVUFBVSx1QkFBdUI7SUFFbkMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQTZGO1FBRXBILElBQUksRUFBRSxnQkFBZ0I7UUFFdEIsUUFBUSxFQUFFOzs7OztTQUtUO1FBRUQsSUFBSSxFQUFDO1lBRUQsa0JBQWtCLEVBQUUsQ0FBQyxNQUFNLEVBQUMsRUFBRSxHQUFFLENBQUM7WUFFakMsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFDLEVBQUU7Z0JBQ1osMERBQTBEO1lBQzlELENBQUM7U0FFSjtRQUdELFVBQVUsRUFBRTtZQUVSLEtBQUssRUFBQztnQkFDRjtvQkFDSSxPQUFPLEVBQUMsTUFBTTtvQkFDZCxhQUFhLEVBQUMsS0FBSztpQkFDdEI7YUFDSjtTQUVKO1FBR0QsS0FBSyxFQUFDO1lBRUYsS0FBSyxFQUFFLGVBQWU7WUFFdEIsTUFBTSxFQUFFLEtBQUs7U0FFaEI7UUFHRCxLQUFLLEVBQUM7WUFFRixLQUFLLEVBQUUsS0FBSztTQUVmO1FBRUQsT0FBTyxFQUFDO1lBRUosTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBQztZQUdyQixDQUFDO1NBRUo7S0FHSixDQUFDLENBQUE7QUFFTixDQUFDO0FBS0QsTUFBTSxVQUFVLGlCQUFpQjtJQUk3QixJQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsRUFBQztRQUVuQyxjQUFjLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxtQkFBbUIsQ0FBQyxDQUFBO0tBRTdEO0lBRUQsSUFBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUM7UUFFakMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsaUJBQWlCLENBQUMsQ0FBQTtLQUV6RDtJQUVELElBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFDO1FBRWpDLGNBQWMsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLGlCQUFpQixDQUFDLENBQUE7S0FFekQ7SUFHRCxPQUFPO1FBRUgsU0FBUyxFQUFDO1lBRU4sTUFBTSxFQUFFLHVCQUF1QixFQUFFO1NBRXBDO0tBRUosQ0FBQTtBQUVMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU2Vuc2VuLCB7IFNlbnNlbkhUTUxFbGVtZW50IH0gZnJvbSBcIi4uXCI7XG5pbXBvcnQgeyBDb21wb25lbnRNZXRob2RSYXcsIENvbXBvbmVudFByb3BzLCBDb21wb25lbnRTdGF0ZSB9IGZyb20gXCIuLi9pbmRleC50XCI7XG5cblxuXG4vKipcbiAqIFNjZW5lIEhlYWRlclxuICovXG5leHBvcnQgY2xhc3MgU2NlbmVBY3Rpdml0eUhlYWRlciBleHRlbmRzIFNlbnNlbkhUTUxFbGVtZW50PHt9PiB7XG5cbiAgICBjb25zdHJ1Y3Rvcigpe1xuXG4gICAgICAgIHN1cGVyKHt9KTtcblxuICAgIH1cblxufVxuXG5cbi8qKlxuICogU2NlbmUgQm9keVxuICovXG5leHBvcnQgY2xhc3MgU2NlbmVBY3Rpdml0eUJvZHkgZXh0ZW5kcyBTZW5zZW5IVE1MRWxlbWVudDx7fT4ge1xuXG4gICAgY29uc3RydWN0b3IoKXtcblxuICAgICAgICBzdXBlcih7fSk7XG5cbiAgICB9XG5cbn1cblxuXG4vKipcbiAqIFNjZW5lIEZvb3RlclxuICovXG5leHBvcnQgY2xhc3MgU2NlbmVBY3Rpdml0eU1lbnUgZXh0ZW5kcyBTZW5zZW5IVE1MRWxlbWVudDx7fT4ge1xuXG4gICAgY29uc3RydWN0b3IoKXtcblxuICAgICAgICBzdXBlcih7fSk7XG5cbiAgICB9XG5cbn1cblxuXG5cblxuZXhwb3J0IHR5cGUgQWN0aXZpdHlIZWFkZXJDb21wb25lbnRTdGF0ZSA9IENvbXBvbmVudFN0YXRlICYge1xuXG4gICAgdGl0bGU6IHN0cmluZyB8IGJvb2xlYW47XG4gICAgXG59XG5cbmV4cG9ydCB0eXBlIEFjdGl2aXR5SGVhZGVyQ29tcG9uZW50UHJvcHMgPSBDb21wb25lbnRQcm9wcyAmIHtcblxuICAgIGdvQmFjazogYm9vbGVhbjtcbiAgICBcbn1cblxuZXhwb3J0IHR5cGUgQWN0aXZpdHlIZWFkZXJDb21wb25lbnRNZXRob2RzID0gQ29tcG9uZW50TWV0aG9kUmF3PEFjdGl2aXR5SGVhZGVyQ29tcG9uZW50U3RhdGUsIEFjdGl2aXR5SGVhZGVyQ29tcG9uZW50UHJvcHM+ICYge1xuXG4gICAgZ29CYWNrOiAoKT0+dm9pZDtcbiAgICBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFjdGl2aXR5SGVhZGVyQ29tcG9uZW50KCl7XG4gICAgXG4gICAgcmV0dXJuIG5ldyBTZW5zZW4uQ29tcG9uZW50PEFjdGl2aXR5SGVhZGVyQ29tcG9uZW50U3RhdGUsIEFjdGl2aXR5SGVhZGVyQ29tcG9uZW50UHJvcHMsIEFjdGl2aXR5SGVhZGVyQ29tcG9uZW50TWV0aG9kcz4oe1xuICAgIFxuICAgICAgICBuYW1lOiAnYWN0aXZpdHlIZWFkZXInLFxuICAgIFxuICAgICAgICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgYWN0aXZpdHktaGVhZGVyLWdvYmFjayA+R28gQmFjazwvZGl2PlxuICAgIDxkaXYgYWN0aXZpdHktaGVhZGVyLWxlZnQgPjwvZGl2PlxuICAgIDxkaXYgYWN0aXZpdHktaGVhZGVyLWNlbnRlciBcIj57eyB0aGlzLnByb3BzLnRpdGxlIH19PC9kaXY+XG4gICAgPGRpdiBhY3Rpdml0eS1oZWFkZXItcmlnaHQgPjwvZGl2PlxuICAgICAgICBgLFxuICAgICAgICBcbiAgICAgICAgZW1pdDp7XG4gICAgXG4gICAgICAgICAgICBleHByZXNzaW9uUmVjb3JkZWQ6IChyZWNvcmQpPT57IH0sXG4gICAgXG4gICAgICAgICAgICBjb25uZWN0ZWQ6IChlKT0+eyBcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oJ0NvbXBvbmVudCBDb25uZWN0ZWQnLCBlLmVtaXQucHJvcHMudGl0bGUpXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgIH0sXG5cblxuICAgICAgICBhcHBlYXJhbmNlOiB7XG5cbiAgICAgICAgICAgICRzZWxmOltcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6J2ZsZXgnLFxuICAgICAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOidyb3cnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgICAgXG4gICAgICAgIH0sXG4gICAgXG4gICAgXG4gICAgICAgIHByb3BzOntcbiAgICBcbiAgICAgICAgICAgIHRpdGxlOiAnZGVmYXVsdCB0aXRsZScsXG5cbiAgICAgICAgICAgIGdvQmFjazogZmFsc2UsXG4gICAgXG4gICAgICAgIH0sXG4gICAgXG4gICAgXG4gICAgICAgIHN0YXRlOntcbiAgICBcbiAgICAgICAgICAgIHRpdGxlOiBmYWxzZSxcbiAgICBcbiAgICAgICAgfSxcbiAgICBcbiAgICAgICAgbWV0aG9kczp7XG4gICAgXG4gICAgICAgICAgICBnb0JhY2soeyBzZWxmLCBldmVudH0pe1xuXG4gICAgXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICBcbiAgICBcbiAgICB9KVxuICAgIFxufVxuXG5cblxuXG5leHBvcnQgZnVuY3Rpb24gdXNlU2NyZWVuRWxlbWVudHMoKXtcblxuXG5cbiAgICBpZighY3VzdG9tRWxlbWVudHMuZ2V0KGBzY2VuZS1oZWFkZXJgKSl7XG5cbiAgICAgICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKGBzY2VuZS1oZWFkZXJgLCBTY2VuZUFjdGl2aXR5SGVhZGVyKVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgaWYoIWN1c3RvbUVsZW1lbnRzLmdldChgc2NlbmUtYm9keWApKXtcblxuICAgICAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUoYHNjZW5lLWJvZHlgLCBTY2VuZUFjdGl2aXR5Qm9keSlcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGlmKCFjdXN0b21FbGVtZW50cy5nZXQoYHNjZW5lLW1lbnVgKSl7XG5cbiAgICAgICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKGBzY2VuZS1tZW51YCwgU2NlbmVBY3Rpdml0eU1lbnUpXG4gICAgICAgIFxuICAgIH1cbiAgICBcblxuICAgIHJldHVybiB7XG5cbiAgICAgICAgY29tcG9uZW50OntcblxuICAgICAgICAgICAgaGVkYWVyOiBhY3Rpdml0eUhlYWRlckNvbXBvbmVudCgpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG5cbn1cbiJdfQ==