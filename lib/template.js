function loadTemplate(source) {
    const errorResponses = {
        code: 0,
        message: 'unknown'
    };
    return new Promise((resolve, reject) => {
        if (typeof source != 'string' || !source) {
            errorResponses.code = 1;
            errorResponses.message = `string is not a path`;
            reject(errorResponses);
            return undefined;
        }
        else {
            /**
             * Check
             *  */
            const check = source.match(/<\/?[^>]+>/gi);
            /**
             * If Template is String HTML code
             * */
            if (check) {
                resolve(source);
                return undefined;
            }
            /**
             * Else, it's file path
             * */
            const url = new URL(location.href);
            /**
             * File Path
             */
            const path = `${url.origin}${(url.pathname == '/') ? '' : url.pathname}/${source}`;
            /**
             * Fetch
             */
            fetch(path)
                .then(d => { if (d.status == 404) {
                return undefined;
            } return d; })
                .then(response => {
                resolve(response);
            })
                .catch(er => {
                console.error('Template Loader : not found\n', er);
                errorResponses.code = 3;
                errorResponses.message = `not found`;
                reject(errorResponses);
            });
        }
    });
}
function resolveTemplateResponse(res) {
    if (res instanceof Response) {
        if (res?.status == 0 || res?.status == 200) {
            // console.log('Template Builder', res)
            return res.text();
        }
        else if (res?.status == 403) {
            console.warn(`Sensen Template Loading failed`, res);
        }
        else if (res?.status == 404) {
            console.warn(`Sensen Template : ${res?.url} not found`, res);
        }
    }
    else {
        return res;
    }
    return undefined;
}
export class SensenTemplate {
}
SensenTemplate.Load = loadTemplate;
SensenTemplate.ResolveResponse = resolveTemplateResponse;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9jb3JlL3RlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLFNBQVMsWUFBWSxDQUFDLE1BQWM7SUFFaEMsTUFBTSxjQUFjLEdBQUc7UUFFbkIsSUFBSSxFQUFFLENBQUM7UUFFUCxPQUFPLEVBQUUsU0FBUztLQUVyQixDQUFBO0lBRUQsT0FBTyxJQUFJLE9BQU8sQ0FBZ0MsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFDLEVBQUU7UUFHakUsSUFBRyxPQUFPLE1BQU0sSUFBSSxRQUFRLElBQUksQ0FBQyxNQUFNLEVBQUM7WUFFcEMsY0FBYyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUE7WUFFdkIsY0FBYyxDQUFDLE9BQU8sR0FBRyxzQkFBc0IsQ0FBQTtZQUUvQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7WUFFdkIsT0FBTyxTQUFTLENBQUM7U0FFcEI7YUFFRztZQUVBOztrQkFFTTtZQUNOLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7WUFHM0M7O2lCQUVLO1lBQ0wsSUFBRyxLQUFLLEVBQUM7Z0JBRUwsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUVoQixPQUFPLFNBQVMsQ0FBQzthQUVwQjtZQUdEOztpQkFFSztZQUNMLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUdsQzs7ZUFFRztZQUNILE1BQU0sSUFBSSxHQUFHLEdBQUksR0FBRyxDQUFDLE1BQU8sR0FBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVMsSUFBSyxNQUFPLEVBQUUsQ0FBQTtZQUd4Rjs7ZUFFRztZQUNILEtBQUssQ0FBQyxJQUFJLENBQUM7aUJBRVYsSUFBSSxDQUFDLENBQUMsQ0FBQSxFQUFFLEdBQUUsSUFBRyxDQUFDLENBQUMsTUFBTSxJQUFJLEdBQUcsRUFBQztnQkFBRSxPQUFPLFNBQVMsQ0FBQTthQUFFLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUM7aUJBRTdELElBQUksQ0FBQyxRQUFRLENBQUEsRUFBRTtnQkFFWixPQUFPLENBQUMsUUFBUSxDQUFDLENBQUE7WUFFckIsQ0FBQyxDQUFDO2lCQUVELEtBQUssQ0FBQyxFQUFFLENBQUEsRUFBRTtnQkFFUCxPQUFPLENBQUMsS0FBSyxDQUFDLCtCQUErQixFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUVuRCxjQUFjLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQTtnQkFFdkIsY0FBYyxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUE7Z0JBRXBDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUUzQixDQUFDLENBQUMsQ0FBQTtTQUdMO0lBRUwsQ0FBQyxDQUFDLENBQUE7QUFFTixDQUFDO0FBTUQsU0FBUyx1QkFBdUIsQ0FBQyxHQUFrQztJQUUvRCxJQUFHLEdBQUcsWUFBWSxRQUFRLEVBQUM7UUFFdkIsSUFBRyxHQUFHLEVBQUUsTUFBTSxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsTUFBTSxJQUFJLEdBQUcsRUFBQztZQUV0Qyx1Q0FBdUM7WUFFdkMsT0FBTyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7U0FFckI7YUFHSSxJQUFHLEdBQUcsRUFBRSxNQUFNLElBQUksR0FBRyxFQUFDO1lBRXZCLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLEVBQUUsR0FBRyxDQUFDLENBQUE7U0FFdEQ7YUFHSSxJQUFHLEdBQUcsRUFBRSxNQUFNLElBQUksR0FBRyxFQUFDO1lBRXZCLE9BQU8sQ0FBQyxJQUFJLENBQUMscUJBQXNCLEdBQUcsRUFBRSxHQUFJLFlBQVksRUFBRSxHQUFHLENBQUMsQ0FBQTtTQUVqRTtLQUVKO1NBRUc7UUFFQSxPQUFPLEdBQUcsQ0FBQztLQUVkO0lBRUQsT0FBTyxTQUFTLENBQUE7QUFFcEIsQ0FBQztBQU9ELE1BQU0sT0FBTyxjQUFjOztBQUVoQixtQkFBSSxHQUFHLFlBQVksQ0FBQTtBQUVuQiw4QkFBZSxHQUFHLHVCQUF1QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiXG5cblxuXG5cblxuXG5mdW5jdGlvbiBsb2FkVGVtcGxhdGUoc291cmNlOiBzdHJpbmcpe1xuXG4gICAgY29uc3QgZXJyb3JSZXNwb25zZXMgPSB7XG5cbiAgICAgICAgY29kZTogMCxcbiAgICAgICAgXG4gICAgICAgIG1lc3NhZ2U6ICd1bmtub3duJ1xuXG4gICAgfVxuICAgIFxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxSZXNwb25zZSB8IHN0cmluZyB8IHVuZGVmaW5lZD4oKHJlc29sdmUsIHJlamVjdCk9PntcblxuXG4gICAgICAgIGlmKHR5cGVvZiBzb3VyY2UgIT0gJ3N0cmluZycgfHwgIXNvdXJjZSl7XG5cbiAgICAgICAgICAgIGVycm9yUmVzcG9uc2VzLmNvZGUgPSAxXG5cbiAgICAgICAgICAgIGVycm9yUmVzcG9uc2VzLm1lc3NhZ2UgPSBgc3RyaW5nIGlzIG5vdCBhIHBhdGhgXG5cbiAgICAgICAgICAgIHJlamVjdChlcnJvclJlc3BvbnNlcyk7IFxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgXG4gICAgICAgIH1cblxuICAgICAgICBlbHNle1xuXG4gICAgICAgICAgICAvKiogXG4gICAgICAgICAgICAgKiBDaGVja1xuICAgICAgICAgICAgICogICovXG4gICAgICAgICAgICBjb25zdCBjaGVjayA9IHNvdXJjZS5tYXRjaCgvPFxcLz9bXj5dKz4vZ2kpO1xuXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgVGVtcGxhdGUgaXMgU3RyaW5nIEhUTUwgY29kZSBcbiAgICAgICAgICAgICAqICovXG4gICAgICAgICAgICBpZihjaGVjayl7IFxuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShzb3VyY2UpOyBcblxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7IFxuXG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFbHNlLCBpdCdzIGZpbGUgcGF0aCBcbiAgICAgICAgICAgICAqICovXG4gICAgICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGxvY2F0aW9uLmhyZWYpXG5cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGaWxlIFBhdGhcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IGAkeyB1cmwub3JpZ2luIH0keyAodXJsLnBhdGhuYW1lID09ICcvJykgPyAnJyA6IHVybC5wYXRobmFtZSB9LyR7IHNvdXJjZSB9YFxuXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRmV0Y2hcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZmV0Y2gocGF0aClcbiAgICAgICAgXG4gICAgICAgICAgICAudGhlbihkPT57IGlmKGQuc3RhdHVzID09IDQwNCl7IHJldHVybiB1bmRlZmluZWQgfSByZXR1cm4gZCB9KVxuXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZT0+e1xuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSlcblxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgLmNhdGNoKGVyPT57IFxuXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignVGVtcGxhdGUgTG9hZGVyIDogbm90IGZvdW5kXFxuJywgZXIpO1xuXG4gICAgICAgICAgICAgICAgZXJyb3JSZXNwb25zZXMuY29kZSA9IDNcblxuICAgICAgICAgICAgICAgIGVycm9yUmVzcG9uc2VzLm1lc3NhZ2UgPSBgbm90IGZvdW5kYFxuXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yUmVzcG9uc2VzKTsgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9KVxuICAgIFxufVxuXG5cblxuXG5cbmZ1bmN0aW9uIHJlc29sdmVUZW1wbGF0ZVJlc3BvbnNlKHJlczogc3RyaW5nIHwgUmVzcG9uc2UgfCB1bmRlZmluZWQpe1xuXG4gICAgaWYocmVzIGluc3RhbmNlb2YgUmVzcG9uc2Upe1xuXG4gICAgICAgIGlmKHJlcz8uc3RhdHVzID09IDAgfHwgcmVzPy5zdGF0dXMgPT0gMjAwKXtcblxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ1RlbXBsYXRlIEJ1aWxkZXInLCByZXMpXG5cbiAgICAgICAgICAgIHJldHVybiByZXMudGV4dCgpO1xuICAgICAgICAgICAgXG4gICAgICAgIH1cblxuXG4gICAgICAgIGVsc2UgaWYocmVzPy5zdGF0dXMgPT0gNDAzKXtcblxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBTZW5zZW4gVGVtcGxhdGUgTG9hZGluZyBmYWlsZWRgLCByZXMpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuXG5cbiAgICAgICAgZWxzZSBpZihyZXM/LnN0YXR1cyA9PSA0MDQpe1xuXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFNlbnNlbiBUZW1wbGF0ZSA6ICR7IHJlcz8udXJsIH0gbm90IGZvdW5kYCwgcmVzKVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGVsc2V7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuXG59XG5cblxuXG5cblxuXG5leHBvcnQgY2xhc3MgU2Vuc2VuVGVtcGxhdGV7XG5cbiAgICBzdGF0aWMgTG9hZCA9IGxvYWRUZW1wbGF0ZVxuXG4gICAgc3RhdGljIFJlc29sdmVSZXNwb25zZSA9IHJlc29sdmVUZW1wbGF0ZVJlc3BvbnNlXG4gICAgXG59Il19