import { CreateComponentMethodEvent } from ".";
import { DirectiveAttributes } from "./directive";
/**
 * Directive Configurations
 */
DirectiveAttributes.Define({
    name: 'action',
    expression: '@',
    main: (component, record) => {
        const args = Array.isArray(record.arguments) ? record.arguments : [];
        record.node.addEventListener(`${record.name}`, (ev) => {
            const attrib = (('attributes' in record.node)
                ? record.node.getAttribute(record.match?.input || '')
                : '')?.trim();
            if (args.indexOf('prevent') > -1) {
                ev.preventDefault();
            }
            if (args.indexOf('stop') > -1) {
                ev.stopPropagation();
            }
            // const attrib = value as keyof typeof component.state;
            /**
             * Check Component methods
             */
            const isMethod = attrib?.indexOf(`this.methods.`) == 0;
            const _event = CreateComponentMethodEvent(component, ev);
            if (isMethod) {
                const method = component.methods[attrib.substring((`this.methods.`).length)];
                /** * Check is transaction function */
                if (typeof method == 'function') {
                    method.apply(component.state, [_event]);
                }
            }
            else {
                if (typeof attrib == 'string' && attrib in window) {
                    // @ts-ignore
                    const fn = (window[attrib] || (() => { }));
                    if (typeof fn == 'function') {
                        fn.apply(window, [_event]);
                    }
                }
            }
        }, args.indexOf('capture') > -1 ? true : false);
    },
    // parser: (record)=>{},
});
export const NativeDirectiveAttributes = DirectiveAttributes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLm5hdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2NvcmUvZGlyZWN0aXZlLm5hdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxHQUFHLENBQUM7QUFDL0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sYUFBYSxDQUFBO0FBSWpEOztHQUVHO0FBRUgsbUJBQW1CLENBQUMsTUFBTSxDQUFDO0lBRXZCLElBQUksRUFBQyxRQUFRO0lBRWIsVUFBVSxFQUFDLEdBQUc7SUFFZCxJQUFJLEVBQUUsQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFDLEVBQUU7UUFHdkIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUdyRSxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUksTUFBTSxDQUFDLElBQUssRUFBRSxFQUFFLENBQUMsRUFBUyxFQUFDLEVBQUU7WUFHMUQsTUFBTSxNQUFNLEdBQUcsQ0FFWCxDQUFDLFlBQVksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDO2dCQUU3QixDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxLQUFLLElBQUUsRUFBRSxDQUFDO2dCQUVuRCxDQUFDLENBQUMsRUFBRSxDQUVQLEVBQUUsSUFBSSxFQUFFLENBQUM7WUFFVixJQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUM7Z0JBQUUsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFBO2FBQUU7WUFFdkQsSUFBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDO2dCQUFFLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQTthQUFFO1lBRXJELHdEQUF3RDtZQUd4RDs7ZUFFRztZQUNILE1BQU0sUUFBUSxHQUFHLE1BQU0sRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRXZELE1BQU0sTUFBTSxHQUFHLDBCQUEwQixDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQTtZQUl4RCxJQUFHLFFBQVEsRUFBQztnQkFFUixNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBRSxDQUFDO2dCQUUvRSxzQ0FBc0M7Z0JBQ3RDLElBQUcsT0FBTyxNQUFNLElBQUksVUFBVSxFQUFDO29CQUUzQixNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO2lCQUUxQzthQUVKO2lCQUVHO2dCQUVBLElBQUcsT0FBTyxNQUFNLElBQUksUUFBUSxJQUFJLE1BQU0sSUFBSSxNQUFNLEVBQUM7b0JBRTdDLGFBQWE7b0JBQ2IsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFFLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBYSxDQUFBO29CQUVuRCxJQUFHLE9BQU8sRUFBRSxJQUFJLFVBQVUsRUFBQzt3QkFFdkIsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO3FCQUU3QjtpQkFFSjthQUVKO1FBTUwsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUE7SUFFbkQsQ0FBQztJQUVELHdCQUF3QjtDQUUzQixDQUFDLENBQUE7QUFJRixNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxtQkFBbUIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENyZWF0ZUNvbXBvbmVudE1ldGhvZEV2ZW50IH0gZnJvbSBcIi5cIjtcbmltcG9ydCB7IERpcmVjdGl2ZUF0dHJpYnV0ZXMgfSBmcm9tIFwiLi9kaXJlY3RpdmVcIlxuXG5cblxuLyoqXG4gKiBEaXJlY3RpdmUgQ29uZmlndXJhdGlvbnNcbiAqL1xuXG5EaXJlY3RpdmVBdHRyaWJ1dGVzLkRlZmluZSh7XG5cbiAgICBuYW1lOidhY3Rpb24nLFxuICAgIFxuICAgIGV4cHJlc3Npb246J0AnLFxuICAgIFxuICAgIG1haW46IChjb21wb25lbnQsIHJlY29yZCk9PntcbiAgICBcblxuICAgICAgICBjb25zdCBhcmdzID0gQXJyYXkuaXNBcnJheShyZWNvcmQuYXJndW1lbnRzKSA/IHJlY29yZC5hcmd1bWVudHMgOiBbXTtcblxuICAgIFxuICAgICAgICByZWNvcmQubm9kZS5hZGRFdmVudExpc3RlbmVyKGAkeyByZWNvcmQubmFtZSB9YCwgKGV2OiBFdmVudCk9PntcblxuXG4gICAgICAgICAgICBjb25zdCBhdHRyaWIgPSAoXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgKCdhdHRyaWJ1dGVzJyBpbiByZWNvcmQubm9kZSkgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgPyByZWNvcmQubm9kZS5nZXRBdHRyaWJ1dGUocmVjb3JkLm1hdGNoPy5pbnB1dHx8JycpXG5cbiAgICAgICAgICAgICAgICA6ICcnXG5cbiAgICAgICAgICAgICk/LnRyaW0oKTtcblxuICAgICAgICAgICAgaWYoYXJncy5pbmRleE9mKCdwcmV2ZW50JykgPiAtMSl7IGV2LnByZXZlbnREZWZhdWx0KCkgfVxuXG4gICAgICAgICAgICBpZihhcmdzLmluZGV4T2YoJ3N0b3AnKSA+IC0xKXsgZXYuc3RvcFByb3BhZ2F0aW9uKCkgfVxuXG4gICAgICAgICAgICAvLyBjb25zdCBhdHRyaWIgPSB2YWx1ZSBhcyBrZXlvZiB0eXBlb2YgY29tcG9uZW50LnN0YXRlO1xuXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2hlY2sgQ29tcG9uZW50IG1ldGhvZHNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgaXNNZXRob2QgPSBhdHRyaWI/LmluZGV4T2YoYHRoaXMubWV0aG9kcy5gKSA9PSAwO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBfZXZlbnQgPSBDcmVhdGVDb21wb25lbnRNZXRob2RFdmVudChjb21wb25lbnQsIGV2KVxuXG5cblxuICAgICAgICAgICAgaWYoaXNNZXRob2Qpe1xuXG4gICAgICAgICAgICAgICAgY29uc3QgbWV0aG9kID0gY29tcG9uZW50Lm1ldGhvZHNbIGF0dHJpYi5zdWJzdHJpbmcoKGB0aGlzLm1ldGhvZHMuYCkubGVuZ3RoKSBdO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8qKiAqIENoZWNrIGlzIHRyYW5zYWN0aW9uIGZ1bmN0aW9uICovXG4gICAgICAgICAgICAgICAgaWYodHlwZW9mIG1ldGhvZCA9PSAnZnVuY3Rpb24nKXtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZC5hcHBseShjb21wb25lbnQuc3RhdGUsIFtfZXZlbnRdKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsc2V7XG5cbiAgICAgICAgICAgICAgICBpZih0eXBlb2YgYXR0cmliID09ICdzdHJpbmcnICYmIGF0dHJpYiBpbiB3aW5kb3cpe1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm4gPSAod2luZG93W2F0dHJpYl0gfHwgKCgpPT57fSkpIGFzIEZ1bmN0aW9uXG5cbiAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIGZuID09ICdmdW5jdGlvbicpe1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBmbi5hcHBseSh3aW5kb3csIFtfZXZlbnRdKVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBcblxuXG4gICAgICAgIH0sIGFyZ3MuaW5kZXhPZignY2FwdHVyZScpID4gLTEgPyB0cnVlIDogZmFsc2UpXG5cbiAgICB9LFxuICAgIFxuICAgIC8vIHBhcnNlcjogKHJlY29yZCk9Pnt9LFxuXG59KVxuXG5cblxuZXhwb3J0IGNvbnN0IE5hdGl2ZURpcmVjdGl2ZUF0dHJpYnV0ZXMgPSBEaXJlY3RpdmVBdHRyaWJ1dGVzXG5cbiJdfQ==