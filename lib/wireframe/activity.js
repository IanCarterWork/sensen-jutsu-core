import { SensenAppearance } from "../appearance";
import { SceneActivityBody, SceneActivityHeader, SceneActivityMenu } from "../elements/activity";
import { ThemeColor } from "../theme-color";
export function Fullscreen() {
    return {
        body: new SceneActivityBody(),
    };
}
export function Basic() {
    const header = new SceneActivityHeader();
    const body = new SceneActivityBody();
    const menu = new SceneActivityMenu();
    const HAppearance = new SensenAppearance();
    const BAppearance = new SensenAppearance();
    const MAppearance = new SensenAppearance();
    HAppearance.selectors({
        $self: [
            {
                backgroundColor: ThemeColor.$('layer'),
                color: ThemeColor.$('white'),
                minHeight: '48px',
                display: 'flex',
                flexDirection: 'row',
                alignItems: 'center',
                position: 'sticky',
                top: '0',
                left: '0',
                width: '100vw',
                maxWidth: '100vw',
            }
        ],
        '[activity\\:header-center]': [
            {
                flex: '1 1 auto'
            }
        ]
    }).mount();
    header.classList.add(HAppearance.$UiD);
    MAppearance.selectors({
        $self: [
            {
                backgroundColor: ThemeColor.$('layer'),
                color: ThemeColor.$('white'),
                minHeight: '48px',
                display: 'flex',
                flexDirection: 'row',
                alignItems: 'center',
                position: 'sticky',
                bottom: '0',
                left: '0',
                width: '100vw',
                maxWidth: '100vw',
            }
        ],
    }).mount();
    menu.classList.add(MAppearance.$UiD);
    BAppearance.selectors({
        $self: [
            {
                padding: '48px 0',
            }
        ],
    }).mount();
    body.classList.add(BAppearance.$UiD);
    return {
        header: header,
        body: body,
        menu: menu,
    };
}
export function NavBottom() {
    return {
        header: new SceneActivityHeader(),
        body: new SceneActivityBody(),
        menu: new SceneActivityMenu(),
    };
}
export class ActivityWireframe {
}
ActivityWireframe.Basic = Basic;
ActivityWireframe.NavBottom = NavBottom;
ActivityWireframe.Fullscreen = Fullscreen;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9jb3JlL3dpcmVmcmFtZS9hY3Rpdml0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLG1CQUFtQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDakcsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBa0I1QyxNQUFNLFVBQVUsVUFBVTtJQUV0QixPQUFPO1FBRUgsSUFBSSxFQUFFLElBQUksaUJBQWlCLEVBQUU7S0FFaEMsQ0FBQTtBQUVMLENBQUM7QUFNRCxNQUFNLFVBQVUsS0FBSztJQUVqQixNQUFNLE1BQU0sR0FBRyxJQUFJLG1CQUFtQixFQUFFLENBQUM7SUFFekMsTUFBTSxJQUFJLEdBQUcsSUFBSSxpQkFBaUIsRUFBRSxDQUFDO0lBRXJDLE1BQU0sSUFBSSxHQUFHLElBQUksaUJBQWlCLEVBQUUsQ0FBQztJQUdyQyxNQUFNLFdBQVcsR0FBRyxJQUFJLGdCQUFnQixFQUFFLENBQUE7SUFFMUMsTUFBTSxXQUFXLEdBQUcsSUFBSSxnQkFBZ0IsRUFBRSxDQUFBO0lBRTFDLE1BQU0sV0FBVyxHQUFHLElBQUksZ0JBQWdCLEVBQUUsQ0FBQTtJQUkxQyxXQUFXLENBQUMsU0FBUyxDQUFDO1FBRWxCLEtBQUssRUFBQztZQUVGO2dCQUVJLGVBQWUsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztnQkFFdEMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO2dCQUU1QixTQUFTLEVBQUMsTUFBTTtnQkFFaEIsT0FBTyxFQUFFLE1BQU07Z0JBRWYsYUFBYSxFQUFFLEtBQUs7Z0JBRXBCLFVBQVUsRUFBRSxRQUFRO2dCQUVwQixRQUFRLEVBQUUsUUFBUTtnQkFFbEIsR0FBRyxFQUFDLEdBQUc7Z0JBRVAsSUFBSSxFQUFDLEdBQUc7Z0JBRVIsS0FBSyxFQUFDLE9BQU87Z0JBRWIsUUFBUSxFQUFDLE9BQU87YUFFbkI7U0FFSjtRQUlELDRCQUE0QixFQUFDO1lBRXpCO2dCQUVJLElBQUksRUFBRSxVQUFVO2FBRW5CO1NBRUo7S0FJSixDQUFDLENBQUMsS0FBSyxFQUFFLENBQUE7SUFFVixNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7SUFLdEMsV0FBVyxDQUFDLFNBQVMsQ0FBQztRQUVsQixLQUFLLEVBQUM7WUFFRjtnQkFFSSxlQUFlLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7Z0JBRXRDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztnQkFFNUIsU0FBUyxFQUFDLE1BQU07Z0JBRWhCLE9BQU8sRUFBRSxNQUFNO2dCQUVmLGFBQWEsRUFBRSxLQUFLO2dCQUVwQixVQUFVLEVBQUUsUUFBUTtnQkFFcEIsUUFBUSxFQUFFLFFBQVE7Z0JBRWxCLE1BQU0sRUFBQyxHQUFHO2dCQUVWLElBQUksRUFBQyxHQUFHO2dCQUVSLEtBQUssRUFBQyxPQUFPO2dCQUViLFFBQVEsRUFBQyxPQUFPO2FBRW5CO1NBRUo7S0FFSixDQUFDLENBQUMsS0FBSyxFQUFFLENBQUE7SUFFVixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7SUFJcEMsV0FBVyxDQUFDLFNBQVMsQ0FBQztRQUVsQixLQUFLLEVBQUM7WUFDRjtnQkFDSSxPQUFPLEVBQUMsUUFBUTthQUNuQjtTQUNKO0tBRUosQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO0lBRVYsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBT3BDLE9BQU87UUFFSCxNQUFNLEVBQUUsTUFBTTtRQUVkLElBQUksRUFBRSxJQUFJO1FBRVYsSUFBSSxFQUFFLElBQUk7S0FFYixDQUFBO0FBRUwsQ0FBQztBQU1ELE1BQU0sVUFBVSxTQUFTO0lBRXJCLE9BQU87UUFFSCxNQUFNLEVBQUUsSUFBSSxtQkFBbUIsRUFBRTtRQUVqQyxJQUFJLEVBQUUsSUFBSSxpQkFBaUIsRUFBRTtRQUU3QixJQUFJLEVBQUUsSUFBSSxpQkFBaUIsRUFBRTtLQUVoQyxDQUFBO0FBRUwsQ0FBQztBQVlELE1BQU0sT0FBTyxpQkFBaUI7O0FBRW5CLHVCQUFLLEdBQUcsS0FBSyxDQUFDO0FBRWQsMkJBQVMsR0FBRyxTQUFTLENBQUM7QUFFdEIsNEJBQVUsR0FBRyxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZW5zZW5BcHBlYXJhbmNlIH0gZnJvbSBcIi4uL2FwcGVhcmFuY2VcIjtcbmltcG9ydCB7IFNjZW5lQWN0aXZpdHlCb2R5LCBTY2VuZUFjdGl2aXR5SGVhZGVyLCBTY2VuZUFjdGl2aXR5TWVudSB9IGZyb20gXCIuLi9lbGVtZW50cy9hY3Rpdml0eVwiO1xuaW1wb3J0IHsgVGhlbWVDb2xvciB9IGZyb20gXCIuLi90aGVtZS1jb2xvclwiO1xuXG5cblxuZXhwb3J0IHR5cGUgQWN0aXZpdHlXaXJlZnJhbWVTdGF0ZSA9IHtcblxuICAgIGhlYWRlcj8gOiBTY2VuZUFjdGl2aXR5SGVhZGVyO1xuXG4gICAgYm9keT8gOiBTY2VuZUFjdGl2aXR5Qm9keTtcblxuICAgIG1lbnU/IDogU2NlbmVBY3Rpdml0eU1lbnU7XG4gICAgXG59XG5cblxuXG5cblxuZXhwb3J0IGZ1bmN0aW9uIEZ1bGxzY3JlZW4oKSA6IEFjdGl2aXR5V2lyZWZyYW1lU3RhdGV7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBcbiAgICAgICAgYm9keTogbmV3IFNjZW5lQWN0aXZpdHlCb2R5KCksXG4gICAgICAgIFxuICAgIH1cblxufVxuXG5cblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBCYXNpYygpIDogQWN0aXZpdHlXaXJlZnJhbWVTdGF0ZXtcblxuICAgIGNvbnN0IGhlYWRlciA9IG5ldyBTY2VuZUFjdGl2aXR5SGVhZGVyKCk7XG5cbiAgICBjb25zdCBib2R5ID0gbmV3IFNjZW5lQWN0aXZpdHlCb2R5KCk7XG5cbiAgICBjb25zdCBtZW51ID0gbmV3IFNjZW5lQWN0aXZpdHlNZW51KCk7XG4gICAgXG5cbiAgICBjb25zdCBIQXBwZWFyYW5jZSA9IG5ldyBTZW5zZW5BcHBlYXJhbmNlKClcblxuICAgIGNvbnN0IEJBcHBlYXJhbmNlID0gbmV3IFNlbnNlbkFwcGVhcmFuY2UoKVxuXG4gICAgY29uc3QgTUFwcGVhcmFuY2UgPSBuZXcgU2Vuc2VuQXBwZWFyYW5jZSgpXG4gICAgXG5cbiAgICBcbiAgICBIQXBwZWFyYW5jZS5zZWxlY3RvcnMoe1xuXG4gICAgICAgICRzZWxmOltcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogVGhlbWVDb2xvci4kKCdsYXllcicpLFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbG9yOiBUaGVtZUNvbG9yLiQoJ3doaXRlJyksXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbWluSGVpZ2h0Oic0OHB4JyxcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdzdGlja3knLFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRvcDonMCcsXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGVmdDonMCcsXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgd2lkdGg6JzEwMHZ3JyxcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBtYXhXaWR0aDonMTAwdncnLFxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXSxcblxuXG5cbiAgICAgICAgJ1thY3Rpdml0eVxcXFw6aGVhZGVyLWNlbnRlcl0nOltcbiAgICAgICAgICAgIFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGZsZXg6ICcxIDEgYXV0bydcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICBdXG5cblxuXG4gICAgfSkubW91bnQoKVxuICAgIFxuICAgIGhlYWRlci5jbGFzc0xpc3QuYWRkKEhBcHBlYXJhbmNlLiRVaUQpXG5cbiAgICBcblxuICAgIFxuICAgIE1BcHBlYXJhbmNlLnNlbGVjdG9ycyh7XG5cbiAgICAgICAgJHNlbGY6W1xuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFRoZW1lQ29sb3IuJCgnbGF5ZXInKSxcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbG9yOiBUaGVtZUNvbG9yLiQoJ3doaXRlJyksXG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBtaW5IZWlnaHQ6JzQ4cHgnLFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnc3RpY2t5JyxcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGJvdHRvbTonMCcsXG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZWZ0OicwJyxcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHdpZHRoOicxMDB2dycsXG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBtYXhXaWR0aDonMTAwdncnLFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXSxcblxuICAgIH0pLm1vdW50KClcbiAgICBcbiAgICBtZW51LmNsYXNzTGlzdC5hZGQoTUFwcGVhcmFuY2UuJFVpRClcblxuICAgIFxuXG4gICAgQkFwcGVhcmFuY2Uuc2VsZWN0b3JzKHtcblxuICAgICAgICAkc2VsZjpbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGFkZGluZzonNDhweCAwJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcblxuICAgIH0pLm1vdW50KClcbiAgICBcbiAgICBib2R5LmNsYXNzTGlzdC5hZGQoQkFwcGVhcmFuY2UuJFVpRClcblxuXG5cblxuXG5cbiAgICByZXR1cm4ge1xuICAgICAgICBcbiAgICAgICAgaGVhZGVyOiBoZWFkZXIsXG5cbiAgICAgICAgYm9keTogYm9keSxcblxuICAgICAgICBtZW51OiBtZW51LFxuICAgICAgICBcbiAgICB9XG5cbn1cblxuXG5cblxuXG5leHBvcnQgZnVuY3Rpb24gTmF2Qm90dG9tKCkgOiBBY3Rpdml0eVdpcmVmcmFtZVN0YXRle1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgXG4gICAgICAgIGhlYWRlcjogbmV3IFNjZW5lQWN0aXZpdHlIZWFkZXIoKSxcblxuICAgICAgICBib2R5OiBuZXcgU2NlbmVBY3Rpdml0eUJvZHkoKSxcblxuICAgICAgICBtZW51OiBuZXcgU2NlbmVBY3Rpdml0eU1lbnUoKSxcbiAgICAgICAgXG4gICAgfVxuXG59XG5cblxuXG5cblxuXG5cblxuXG5cblxuZXhwb3J0IGNsYXNzIEFjdGl2aXR5V2lyZWZyYW1le1xuXG4gICAgc3RhdGljIEJhc2ljID0gQmFzaWM7XG5cbiAgICBzdGF0aWMgTmF2Qm90dG9tID0gTmF2Qm90dG9tO1xuXG4gICAgc3RhdGljIEZ1bGxzY3JlZW4gPSBGdWxsc2NyZWVuO1xuICAgIFxufVxuXG4iXX0=