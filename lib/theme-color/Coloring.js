export default class SensenColoring {
    /* Hex Manipulation - Begin */
    static HexToRGB(hex) {
        let r = 0, g = 0, b = 0;
        if (hex.length == 4) {
            r = `0x${hex[1] + hex[1]}`;
            g = `0x${hex[2] + hex[2]}`;
            b = `0x${hex[3] + hex[3]}`;
        }
        else if (hex.length == 7) {
            r = `0x${hex[1] + hex[2]}`;
            g = `0x${hex[3] + hex[4]}`;
            b = `0x${hex[5] + hex[6]}`;
        }
        return [+r, +g, +b];
    }
    static HexToCMYK(hex) {
        let C = 0, M = 0, Y = 0, K = 0;
        hex = (hex.charAt(0) == "#") ? hex.substring(1, 7) : hex;
        if (hex.length != 6) {
            return;
        }
        if (/[0-9a-f]{6}/i.test(hex) != true) {
            return;
        }
        let r = parseInt(hex.substring(0, 2), 16);
        let g = parseInt(hex.substring(2, 4), 16);
        let b = parseInt(hex.substring(4, 6), 16);
        // BLACK
        if (r == 0 && g == 0 && b == 0) {
            K = 1;
            return [0, 0, 0, 1];
        }
        C = 1 - (r / 255);
        M = 1 - (g / 255);
        Y = 1 - (b / 255);
        var minCMY = Math.min(C, Math.min(M, Y));
        C = (C - minCMY) / (1 - minCMY);
        M = (M - minCMY) / (1 - minCMY);
        Y = (Y - minCMY) / (1 - minCMY);
        K = minCMY;
        return [C, M, Y, K];
    }
    /* Hex Manipulation - End */
    /* RGB Manipulation - Begin */
    static RGBtoHex({ red, green, blue }) {
        return `#${((1 << 24) + (red << 16) + (green << 8) + blue).toString(16).slice(1)}`;
    }
    static RGBToHSL(r, g, b) {
        r /= 255;
        g /= 255;
        b /= 255;
        let cmin = Math.min(r, g, b), cmax = Math.max(r, g, b), delta = cmax - cmin, h = 0, s = 0, l = 0;
        return `${h}`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3JpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9jb3JlL3RoZW1lLWNvbG9yL2NvbG9yaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE1BQU0sQ0FBQyxPQUFPLE9BQU8sY0FBYztJQUkvQiw4QkFBOEI7SUFFOUIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFXO1FBRXZCLElBQUksQ0FBQyxHQUFvQixDQUFDLEVBQUUsQ0FBQyxHQUFvQixDQUFDLEVBQUUsQ0FBQyxHQUFvQixDQUFDLENBQUM7UUFFM0UsSUFBRyxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBQztZQUVoQixDQUFDLEdBQUcsS0FBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBRSxFQUFFLENBQUM7WUFFN0IsQ0FBQyxHQUFHLEtBQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUUsRUFBRSxDQUFDO1lBRTdCLENBQUMsR0FBRyxLQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFFLEVBQUUsQ0FBQztTQUUvQjthQUVJLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUM7WUFFdEIsQ0FBQyxHQUFHLEtBQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUUsRUFBRSxDQUFDO1lBRTdCLENBQUMsR0FBRyxLQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFFLEVBQUUsQ0FBQztZQUU3QixDQUFDLEdBQUcsS0FBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBRSxFQUFFLENBQUM7U0FFL0I7UUFFRCxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QixDQUFDO0lBS0QsTUFBTSxDQUFDLFNBQVMsQ0FBRSxHQUFXO1FBRXpCLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUvQixHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1FBRXRELElBQUksR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7WUFBRSxPQUFPO1NBQUU7UUFDaEMsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRTtZQUNyQyxPQUFPO1NBQ1A7UUFFRCxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQztRQUV4QyxRQUFRO1FBQ1IsSUFBSSxDQUFDLElBQUUsQ0FBQyxJQUFJLENBQUMsSUFBRSxDQUFDLElBQUksQ0FBQyxJQUFFLENBQUMsRUFBRTtZQUN6QixDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ04sT0FBTyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO1FBRUQsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoQixDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUMsR0FBRyxDQUFDLENBQUM7UUFFaEIsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV2QyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUU7UUFDakMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFFO1FBQ2pDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBRTtRQUNqQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBRVgsT0FBTyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFFRCw0QkFBNEI7SUFNNUIsOEJBQThCO0lBRTlCLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFRaEM7UUFFRyxPQUFPLElBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBRSxFQUFFLENBQUM7SUFFekYsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBUSxFQUFFLENBQVEsRUFBRSxDQUFRO1FBRXhDLENBQUMsSUFBSSxHQUFHLENBQUM7UUFDVCxDQUFDLElBQUksR0FBRyxDQUFDO1FBQ1QsQ0FBQyxJQUFJLEdBQUcsQ0FBQztRQUdULElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFDdEIsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFDdEIsS0FBSyxHQUFHLElBQUksR0FBRyxJQUFJLEVBQ25CLENBQUMsR0FBRyxDQUFDLEVBQ0wsQ0FBQyxHQUFHLENBQUMsRUFDTCxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRVYsT0FBTyxHQUFHLENBQUMsRUFBRSxDQUFDO0lBRWxCLENBQUM7Q0FVSiIsInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2Vuc2VuQ29sb3Jpbmd7XG5cblxuXG4gICAgLyogSGV4IE1hbmlwdWxhdGlvbiAtIEJlZ2luICovXG5cbiAgICBzdGF0aWMgSGV4VG9SR0IoaGV4OiBzdHJpbmcpe1xuXG4gICAgICAgIGxldCByOiBzdHJpbmcgfCBudW1iZXIgPSAwLCBnOiBzdHJpbmcgfCBudW1iZXIgPSAwLCBiOiBzdHJpbmcgfCBudW1iZXIgPSAwO1xuXG4gICAgICAgIGlmKGhleC5sZW5ndGggPT0gNCl7XG5cbiAgICAgICAgICAgciA9IGAweCR7IGhleFsxXSArIGhleFsxXSB9YDtcblxuICAgICAgICAgICBnID0gYDB4JHsgaGV4WzJdICsgaGV4WzJdIH1gO1xuICAgICAgICAgICBcbiAgICAgICAgICAgYiA9IGAweCR7IGhleFszXSArIGhleFszXSB9YDtcblxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBlbHNlIGlmIChoZXgubGVuZ3RoID09IDcpe1xuICAgICBcbiAgICAgICAgICAgciA9IGAweCR7IGhleFsxXSArIGhleFsyXSB9YDtcbiAgICAgICAgICAgXG4gICAgICAgICAgIGcgPSBgMHgkeyBoZXhbM10gKyBoZXhbNF0gfWA7XG4gICAgICAgICAgIFxuICAgICAgICAgICBiID0gYDB4JHsgaGV4WzVdICsgaGV4WzZdIH1gO1xuXG4gICAgICAgIH1cbiAgICAgXG4gICAgICAgIHJldHVybiBbK3IsK2csK2JdO1xuICAgICAgICBcbiAgICB9XG5cblxuXG5cbiAgICBzdGF0aWMgSGV4VG9DTVlLIChoZXg6IHN0cmluZyApIHtcblxuICAgICAgICBsZXQgQyA9IDAsIE0gPSAwLCBZID0gMCwgSyA9IDA7XG4gICAgICAgXG4gICAgICAgIGhleCA9IChoZXguY2hhckF0KDApPT1cIiNcIikgPyBoZXguc3Vic3RyaW5nKDEsNykgOiBoZXg7XG4gICAgICAgXG4gICAgICAgIGlmIChoZXgubGVuZ3RoICE9IDYpIHsgcmV0dXJuOyB9XG4gICAgICAgIGlmICgvWzAtOWEtZl17Nn0vaS50ZXN0KGhleCkgIT0gdHJ1ZSkge1xuICAgICAgICAgcmV0dXJuOyBcbiAgICAgICAgfVxuICAgICAgIFxuICAgICAgICBsZXQgciA9IHBhcnNlSW50KGhleC5zdWJzdHJpbmcoMCwyKSwxNik7IFxuICAgICAgICBsZXQgZyA9IHBhcnNlSW50KGhleC5zdWJzdHJpbmcoMiw0KSwxNik7IFxuICAgICAgICBsZXQgYiA9IHBhcnNlSW50KGhleC5zdWJzdHJpbmcoNCw2KSwxNik7IFxuICAgICAgIFxuICAgICAgICAvLyBCTEFDS1xuICAgICAgICBpZiAocj09MCAmJiBnPT0wICYmIGI9PTApIHtcbiAgICAgICAgIEsgPSAxO1xuICAgICAgICAgcmV0dXJuIFswLDAsMCwxXTtcbiAgICAgICAgfVxuICAgICAgIFxuICAgICAgICBDID0gMSAtIChyLzI1NSk7XG4gICAgICAgIE0gPSAxIC0gKGcvMjU1KTtcbiAgICAgICAgWSA9IDEgLSAoYi8yNTUpO1xuICAgICAgIFxuICAgICAgICB2YXIgbWluQ01ZID0gTWF0aC5taW4oQyxNYXRoLm1pbihNLFkpKTtcbiAgICAgICBcbiAgICAgICAgQyA9IChDIC0gbWluQ01ZKSAvICgxIC0gbWluQ01ZKSA7XG4gICAgICAgIE0gPSAoTSAtIG1pbkNNWSkgLyAoMSAtIG1pbkNNWSkgO1xuICAgICAgICBZID0gKFkgLSBtaW5DTVkpIC8gKDEgLSBtaW5DTVkpIDtcbiAgICAgICAgSyA9IG1pbkNNWTtcbiAgICAgICBcbiAgICAgICAgcmV0dXJuIFtDLE0sWSxLXTtcbiAgICB9XG5cbiAgICAvKiBIZXggTWFuaXB1bGF0aW9uIC0gRW5kICovXG4gICAgXG5cblxuXG5cbiAgICAvKiBSR0IgTWFuaXB1bGF0aW9uIC0gQmVnaW4gKi9cbiAgICBcbiAgICBzdGF0aWMgUkdCdG9IZXgoe3JlZCwgZ3JlZW4sIGJsdWV9OiB7XG5cbiAgICAgICAgcmVkOiBudW1iZXIsXG5cbiAgICAgICAgZ3JlZW46IG51bWJlcixcblxuICAgICAgICBibHVlOiBudW1iZXIsXG5cbiAgICB9KXtcblxuICAgICAgICByZXR1cm4gYCMkeyAoKDEgPDwgMjQpICsgKHJlZCA8PCAxNikgKyAoZ3JlZW4gPDwgOCkgKyBibHVlKS50b1N0cmluZygxNikuc2xpY2UoMSkgfWA7ICAgICAgICBcblxuICAgIH1cblxuICAgIHN0YXRpYyBSR0JUb0hTTChyOm51bWJlciwgZzpudW1iZXIsIGI6bnVtYmVyKSB7XG5cbiAgICAgICAgciAvPSAyNTU7XG4gICAgICAgIGcgLz0gMjU1O1xuICAgICAgICBiIC89IDI1NTtcbiAgICAgIFxuXG4gICAgICAgIGxldCBjbWluID0gTWF0aC5taW4ocixnLGIpLFxuICAgICAgICAgICAgY21heCA9IE1hdGgubWF4KHIsZyxiKSxcbiAgICAgICAgICAgIGRlbHRhID0gY21heCAtIGNtaW4sXG4gICAgICAgICAgICBoID0gMCxcbiAgICAgICAgICAgIHMgPSAwLFxuICAgICAgICAgICAgbCA9IDA7XG5cbiAgICAgICAgcmV0dXJuIGAke2h9YDtcbiAgICAgICAgICAgIFxuICAgIH1cblxuICAgIC8qIFJHQiBNYW5pcHVsYXRpb24gLSBFbmQgKi9cbiAgICBcblxuXG5cblxuXG5cbn1cbiJdfQ==