import { SensenPaletteColor } from "./palette-color";
import { SensenToneColor } from "./tone-color";
export class ThemeColor {
    /**
     * ThemeColor Variable Name
     */
    static $(varname) {
        return (`var(--color-${(varname).replace(new RegExp("([A-Z])", "g"), '-$&').toLowerCase()})`);
    }
}
export default class SensenThemeColor {
    constructor() {
        this.input = [];
        this.palette = {};
        this.tone = {};
        this.DOM = null;
        this.injectionRefs = [];
        this.init();
    }
    add(input) {
        this.input[this.input.length] = input;
        return this;
    }
    render() {
        this.input.forEach(input => {
            if (input instanceof SensenPaletteColor ||
                input instanceof SensenToneColor) {
                this.build(input.Mixture());
            }
            else {
                throw (`This ThemeColor is not supported < ${input.name || 'undefined'} >`);
            }
        });
        return this;
    }
    /* Web Abilities - Begin */
    init() {
        this.DOM = document.querySelector('style[theme\\:color\\:ref]');
        if (!this.DOM) {
            this.DOM = document.createElement('style');
            this.DOM.setAttribute('type', 'text/css');
            this.DOM.setAttribute('theme\:color\:ref', '@transaction');
            document.head.appendChild(this.DOM);
        }
        return this;
    }
    build(input) {
        if ('mixed' in input) {
            const lines = [];
            const majRex = new RegExp("([A-Z])", "g");
            Object.keys(input.mixed).forEach(color => {
                const clone = input.mixed[color];
                Object.keys(input.mixed[color]).forEach(variante => {
                    lines[lines.length] = `${(`--color-${color}${variante == 'color' ? '' : `-${variante}`}`).replace(majRex, '-$&').toLowerCase()} : ${clone[variante]}`;
                });
            });
            this.webInject(input.nature, input.name, lines);
        }
        return this;
    }
    webInject(nature, name, code) {
        let embed;
        if (Array.isArray(code)) {
            code = code.join(';');
        }
        switch (nature) {
            case '@palette':
                embed = `\n:root[theme-color-palette="${name}"]{ ${code} }`;
                break;
            case '@tone':
                embed = `\n:root[theme-color-tone="${name}"]{ ${code} }`;
                break;
        }
        const ref = document.createTextNode(embed);
        this.DOM?.appendChild(ref);
        return this;
    }
    usePalette(name) {
        const doc = document.documentElement;
        doc.setAttribute('theme-color-palette', name);
        return this;
    }
    useTone(name) {
        /**
         * Update Current Object
         */
        this.input.forEach(input => {
            if (input instanceof SensenToneColor) {
                if (input.name == name) {
                    this.tone = input;
                }
            }
        });
        const doc = document.documentElement;
        doc.setAttribute('theme-color-tone', name);
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,