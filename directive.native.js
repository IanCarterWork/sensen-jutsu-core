import { CreateComponentMethodEvent } from ".";
import { DirectiveAttributes } from "./directive";
/**
 * Directive Configurations
 */
DirectiveAttributes.Define({
    name: 'action',
    expression: '@',
    main: (component, record) => {
        const args = Array.isArray(record.arguments) ? record.arguments : [];
        record.node.addEventListener(`${record.name}`, (ev) => {
            const attrib = (('attributes' in record.node)
                ? record.node.getAttribute(record.match?.input || '')
                : '')?.trim();
            if (args.indexOf('prevent') > -1) {
                ev.preventDefault();
            }
            if (args.indexOf('stop') > -1) {
                ev.stopPropagation();
            }
            // const attrib = value as keyof typeof component.state;
            /**
             * Check Component methods
             */
            const isMethod = attrib?.indexOf(`this.methods.`) == 0;
            const _event = CreateComponentMethodEvent(component, ev);
            if (isMethod) {
                const method = component.methods[attrib.substring((`this.methods.`).length)];
                /** * Check is transaction function */
                if (typeof method == 'function') {
                    method.apply(component.state, [_event]);
                }
            }
            else {
                if (typeof attrib == 'string' && attrib in window) {
                    // @ts-ignore
                    const fn = (window[attrib] || (() => { }));
                    if (typeof fn == 'function') {
                        fn.apply(window, [_event]);
                    }
                }
            }
        }, args.indexOf('capture') > -1 ? true : false);
    },
    // parser: (record)=>{},
});
export const NativeDirectiveAttributes = DirectiveAttributes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLm5hdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRpcmVjdGl2ZS5uYXRpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sR0FBRyxDQUFDO0FBQy9DLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUlqRDs7R0FFRztBQUVILG1CQUFtQixDQUFDLE1BQU0sQ0FBQztJQUV2QixJQUFJLEVBQUMsUUFBUTtJQUViLFVBQVUsRUFBQyxHQUFHO0lBRWQsSUFBSSxFQUFFLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBQyxFQUFFO1FBR3ZCLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFHckUsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFJLE1BQU0sQ0FBQyxJQUFLLEVBQUUsRUFBRSxDQUFDLEVBQVMsRUFBQyxFQUFFO1lBRzFELE1BQU0sTUFBTSxHQUFHLENBRVgsQ0FBQyxZQUFZLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQztnQkFFN0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsS0FBSyxJQUFFLEVBQUUsQ0FBQztnQkFFbkQsQ0FBQyxDQUFDLEVBQUUsQ0FFUCxFQUFFLElBQUksRUFBRSxDQUFDO1lBRVYsSUFBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDO2dCQUFFLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQTthQUFFO1lBRXZELElBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQztnQkFBRSxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUE7YUFBRTtZQUVyRCx3REFBd0Q7WUFHeEQ7O2VBRUc7WUFDSCxNQUFNLFFBQVEsR0FBRyxNQUFNLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUV2RCxNQUFNLE1BQU0sR0FBRywwQkFBMEIsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUE7WUFJeEQsSUFBRyxRQUFRLEVBQUM7Z0JBRVIsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBRSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUUsQ0FBQztnQkFFL0Usc0NBQXNDO2dCQUN0QyxJQUFHLE9BQU8sTUFBTSxJQUFJLFVBQVUsRUFBQztvQkFFM0IsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtpQkFFMUM7YUFFSjtpQkFFRztnQkFFQSxJQUFHLE9BQU8sTUFBTSxJQUFJLFFBQVEsSUFBSSxNQUFNLElBQUksTUFBTSxFQUFDO29CQUU3QyxhQUFhO29CQUNiLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRSxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQWEsQ0FBQTtvQkFFbkQsSUFBRyxPQUFPLEVBQUUsSUFBSSxVQUFVLEVBQUM7d0JBRXZCLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtxQkFFN0I7aUJBRUo7YUFFSjtRQU1MLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBRW5ELENBQUM7SUFFRCx3QkFBd0I7Q0FFM0IsQ0FBQyxDQUFBO0FBSUYsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsbUJBQW1CLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDcmVhdGVDb21wb25lbnRNZXRob2RFdmVudCB9IGZyb20gXCIuXCI7XG5pbXBvcnQgeyBEaXJlY3RpdmVBdHRyaWJ1dGVzIH0gZnJvbSBcIi4vZGlyZWN0aXZlXCJcblxuXG5cbi8qKlxuICogRGlyZWN0aXZlIENvbmZpZ3VyYXRpb25zXG4gKi9cblxuRGlyZWN0aXZlQXR0cmlidXRlcy5EZWZpbmUoe1xuXG4gICAgbmFtZTonYWN0aW9uJyxcbiAgICBcbiAgICBleHByZXNzaW9uOidAJyxcbiAgICBcbiAgICBtYWluOiAoY29tcG9uZW50LCByZWNvcmQpPT57XG4gICAgXG5cbiAgICAgICAgY29uc3QgYXJncyA9IEFycmF5LmlzQXJyYXkocmVjb3JkLmFyZ3VtZW50cykgPyByZWNvcmQuYXJndW1lbnRzIDogW107XG5cbiAgICBcbiAgICAgICAgcmVjb3JkLm5vZGUuYWRkRXZlbnRMaXN0ZW5lcihgJHsgcmVjb3JkLm5hbWUgfWAsIChldjogRXZlbnQpPT57XG5cblxuICAgICAgICAgICAgY29uc3QgYXR0cmliID0gKFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICgnYXR0cmlidXRlcycgaW4gcmVjb3JkLm5vZGUpIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgID8gcmVjb3JkLm5vZGUuZ2V0QXR0cmlidXRlKHJlY29yZC5tYXRjaD8uaW5wdXR8fCcnKVxuXG4gICAgICAgICAgICAgICAgOiAnJ1xuXG4gICAgICAgICAgICApPy50cmltKCk7XG5cbiAgICAgICAgICAgIGlmKGFyZ3MuaW5kZXhPZigncHJldmVudCcpID4gLTEpeyBldi5wcmV2ZW50RGVmYXVsdCgpIH1cblxuICAgICAgICAgICAgaWYoYXJncy5pbmRleE9mKCdzdG9wJykgPiAtMSl7IGV2LnN0b3BQcm9wYWdhdGlvbigpIH1cblxuICAgICAgICAgICAgLy8gY29uc3QgYXR0cmliID0gdmFsdWUgYXMga2V5b2YgdHlwZW9mIGNvbXBvbmVudC5zdGF0ZTtcblxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENoZWNrIENvbXBvbmVudCBtZXRob2RzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IGlzTWV0aG9kID0gYXR0cmliPy5pbmRleE9mKGB0aGlzLm1ldGhvZHMuYCkgPT0gMDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgX2V2ZW50ID0gQ3JlYXRlQ29tcG9uZW50TWV0aG9kRXZlbnQoY29tcG9uZW50LCBldilcblxuXG5cbiAgICAgICAgICAgIGlmKGlzTWV0aG9kKXtcblxuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGhvZCA9IGNvbXBvbmVudC5tZXRob2RzWyBhdHRyaWIuc3Vic3RyaW5nKChgdGhpcy5tZXRob2RzLmApLmxlbmd0aCkgXTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvKiogKiBDaGVjayBpcyB0cmFuc2FjdGlvbiBmdW5jdGlvbiAqL1xuICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBtZXRob2QgPT0gJ2Z1bmN0aW9uJyl7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBtZXRob2QuYXBwbHkoY29tcG9uZW50LnN0YXRlLCBbX2V2ZW50XSlcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbHNle1xuXG4gICAgICAgICAgICAgICAgaWYodHlwZW9mIGF0dHJpYiA9PSAnc3RyaW5nJyAmJiBhdHRyaWIgaW4gd2luZG93KXtcblxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZuID0gKHdpbmRvd1thdHRyaWJdIHx8ICgoKT0+e30pKSBhcyBGdW5jdGlvblxuXG4gICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZm4uYXBwbHkod2luZG93LCBbX2V2ZW50XSlcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgXG5cblxuICAgICAgICB9LCBhcmdzLmluZGV4T2YoJ2NhcHR1cmUnKSA+IC0xID8gdHJ1ZSA6IGZhbHNlKVxuXG4gICAgfSxcbiAgICBcbiAgICAvLyBwYXJzZXI6IChyZWNvcmQpPT57fSxcblxufSlcblxuXG5cbmV4cG9ydCBjb25zdCBOYXRpdmVEaXJlY3RpdmVBdHRyaWJ1dGVzID0gRGlyZWN0aXZlQXR0cmlidXRlc1xuXG4iXX0=